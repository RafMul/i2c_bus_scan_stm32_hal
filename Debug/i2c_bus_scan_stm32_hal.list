
i2c_bus_scan_stm32_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f74  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08003080  08003080  00013080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003178  08003178  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003178  08003178  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003178  08003178  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003178  08003178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800317c  0800317c  0001317c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000070  080031f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  080031f0  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac9a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d26  00000000  00000000  0002ad33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  0002ca60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002d420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018467  00000000  00000000  0002dd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbc2  00000000  00000000  000461a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008602d  00000000  00000000  00051d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d7d96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f78  00000000  00000000  000d7dec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003068 	.word	0x08003068

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003068 	.word	0x08003068

0800014c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b43      	ldr	r3, [pc, #268]	; (8000270 <MX_GPIO_Init+0x124>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a42      	ldr	r2, [pc, #264]	; (8000270 <MX_GPIO_Init+0x124>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b40      	ldr	r3, [pc, #256]	; (8000270 <MX_GPIO_Init+0x124>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b3d      	ldr	r3, [pc, #244]	; (8000270 <MX_GPIO_Init+0x124>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a3c      	ldr	r2, [pc, #240]	; (8000270 <MX_GPIO_Init+0x124>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b3a      	ldr	r3, [pc, #232]	; (8000270 <MX_GPIO_Init+0x124>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b37      	ldr	r3, [pc, #220]	; (8000270 <MX_GPIO_Init+0x124>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a36      	ldr	r2, [pc, #216]	; (8000270 <MX_GPIO_Init+0x124>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b34      	ldr	r3, [pc, #208]	; (8000270 <MX_GPIO_Init+0x124>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b31      	ldr	r3, [pc, #196]	; (8000270 <MX_GPIO_Init+0x124>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a30      	ldr	r2, [pc, #192]	; (8000270 <MX_GPIO_Init+0x124>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b2e      	ldr	r3, [pc, #184]	; (8000270 <MX_GPIO_Init+0x124>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	2120      	movs	r1, #32
 80001c4:	482b      	ldr	r0, [pc, #172]	; (8000274 <MX_GPIO_Init+0x128>)
 80001c6:	f000 fe15 	bl	8000df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001d0:	4b29      	ldr	r3, [pc, #164]	; (8000278 <MX_GPIO_Init+0x12c>)
 80001d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001d8:	f107 0310 	add.w	r3, r7, #16
 80001dc:	4619      	mov	r1, r3
 80001de:	4827      	ldr	r0, [pc, #156]	; (800027c <MX_GPIO_Init+0x130>)
 80001e0:	f000 fc84 	bl	8000aec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80001e4:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80001e8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80001ea:	2303      	movs	r3, #3
 80001ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001ee:	f107 0310 	add.w	r3, r7, #16
 80001f2:	4619      	mov	r1, r3
 80001f4:	4821      	ldr	r0, [pc, #132]	; (800027c <MX_GPIO_Init+0x130>)
 80001f6:	f000 fc79 	bl	8000aec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 80001fa:	f649 73d3 	movw	r3, #40915	; 0x9fd3
 80001fe:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000200:	2303      	movs	r3, #3
 8000202:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000204:	f107 0310 	add.w	r3, r7, #16
 8000208:	4619      	mov	r1, r3
 800020a:	481a      	ldr	r0, [pc, #104]	; (8000274 <MX_GPIO_Init+0x128>)
 800020c:	f000 fc6e 	bl	8000aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000210:	2320      	movs	r3, #32
 8000212:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000214:	2301      	movs	r3, #1
 8000216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000218:	2300      	movs	r3, #0
 800021a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800021c:	2302      	movs	r3, #2
 800021e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4813      	ldr	r0, [pc, #76]	; (8000274 <MX_GPIO_Init+0x128>)
 8000228:	f000 fc60 	bl	8000aec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800022c:	f64f 43f7 	movw	r3, #64759	; 0xfcf7
 8000230:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000232:	2303      	movs	r3, #3
 8000234:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000236:	f107 0310 	add.w	r3, r7, #16
 800023a:	4619      	mov	r1, r3
 800023c:	4810      	ldr	r0, [pc, #64]	; (8000280 <MX_GPIO_Init+0x134>)
 800023e:	f000 fc55 	bl	8000aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000242:	2304      	movs	r3, #4
 8000244:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000246:	2303      	movs	r3, #3
 8000248:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800024a:	f107 0310 	add.w	r3, r7, #16
 800024e:	4619      	mov	r1, r3
 8000250:	480c      	ldr	r0, [pc, #48]	; (8000284 <MX_GPIO_Init+0x138>)
 8000252:	f000 fc4b 	bl	8000aec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000256:	2200      	movs	r2, #0
 8000258:	2100      	movs	r1, #0
 800025a:	2028      	movs	r0, #40	; 0x28
 800025c:	f000 fc0f 	bl	8000a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000260:	2028      	movs	r0, #40	; 0x28
 8000262:	f000 fc28 	bl	8000ab6 <HAL_NVIC_EnableIRQ>

}
 8000266:	bf00      	nop
 8000268:	3720      	adds	r7, #32
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40021000 	.word	0x40021000
 8000274:	40010800 	.word	0x40010800
 8000278:	10110000 	.word	0x10110000
 800027c:	40011000 	.word	0x40011000
 8000280:	40010c00 	.word	0x40010c00
 8000284:	40011400 	.word	0x40011400

08000288 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800028c:	4b12      	ldr	r3, [pc, #72]	; (80002d8 <MX_I2C1_Init+0x50>)
 800028e:	4a13      	ldr	r2, [pc, #76]	; (80002dc <MX_I2C1_Init+0x54>)
 8000290:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000292:	4b11      	ldr	r3, [pc, #68]	; (80002d8 <MX_I2C1_Init+0x50>)
 8000294:	4a12      	ldr	r2, [pc, #72]	; (80002e0 <MX_I2C1_Init+0x58>)
 8000296:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000298:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <MX_I2C1_Init+0x50>)
 800029a:	2200      	movs	r2, #0
 800029c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800029e:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <MX_I2C1_Init+0x50>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <MX_I2C1_Init+0x50>)
 80002a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002ac:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <MX_I2C1_Init+0x50>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002b2:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <MX_I2C1_Init+0x50>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002b8:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <MX_I2C1_Init+0x50>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002be:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <MX_I2C1_Init+0x50>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002c4:	4804      	ldr	r0, [pc, #16]	; (80002d8 <MX_I2C1_Init+0x50>)
 80002c6:	f000 fdcf 	bl	8000e68 <HAL_I2C_Init>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002d0:	f000 f902 	bl	80004d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	20000098 	.word	0x20000098
 80002dc:	40005400 	.word	0x40005400
 80002e0:	000186a0 	.word	0x000186a0

080002e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b08a      	sub	sp, #40	; 0x28
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ec:	f107 0314 	add.w	r3, r7, #20
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a1d      	ldr	r2, [pc, #116]	; (8000374 <HAL_I2C_MspInit+0x90>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d132      	bne.n	800036a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000304:	4b1c      	ldr	r3, [pc, #112]	; (8000378 <HAL_I2C_MspInit+0x94>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a1b      	ldr	r2, [pc, #108]	; (8000378 <HAL_I2C_MspInit+0x94>)
 800030a:	f043 0308 	orr.w	r3, r3, #8
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b19      	ldr	r3, [pc, #100]	; (8000378 <HAL_I2C_MspInit+0x94>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0308 	and.w	r3, r3, #8
 8000318:	613b      	str	r3, [r7, #16]
 800031a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800031c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000322:	2312      	movs	r3, #18
 8000324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000326:	2303      	movs	r3, #3
 8000328:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800032a:	f107 0314 	add.w	r3, r7, #20
 800032e:	4619      	mov	r1, r3
 8000330:	4812      	ldr	r0, [pc, #72]	; (800037c <HAL_I2C_MspInit+0x98>)
 8000332:	f000 fbdb 	bl	8000aec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000336:	4b12      	ldr	r3, [pc, #72]	; (8000380 <HAL_I2C_MspInit+0x9c>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	627b      	str	r3, [r7, #36]	; 0x24
 800033c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800033e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000342:	627b      	str	r3, [r7, #36]	; 0x24
 8000344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000346:	f043 0302 	orr.w	r3, r3, #2
 800034a:	627b      	str	r3, [r7, #36]	; 0x24
 800034c:	4a0c      	ldr	r2, [pc, #48]	; (8000380 <HAL_I2C_MspInit+0x9c>)
 800034e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000350:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000352:	4b09      	ldr	r3, [pc, #36]	; (8000378 <HAL_I2C_MspInit+0x94>)
 8000354:	69db      	ldr	r3, [r3, #28]
 8000356:	4a08      	ldr	r2, [pc, #32]	; (8000378 <HAL_I2C_MspInit+0x94>)
 8000358:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800035c:	61d3      	str	r3, [r2, #28]
 800035e:	4b06      	ldr	r3, [pc, #24]	; (8000378 <HAL_I2C_MspInit+0x94>)
 8000360:	69db      	ldr	r3, [r3, #28]
 8000362:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800036a:	bf00      	nop
 800036c:	3728      	adds	r7, #40	; 0x28
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40005400 	.word	0x40005400
 8000378:	40021000 	.word	0x40021000
 800037c:	40010c00 	.word	0x40010c00
 8000380:	40010000 	.word	0x40010000

08000384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000384:	b5b0      	push	{r4, r5, r7, lr}
 8000386:	b088      	sub	sp, #32
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800038a:	f000 fa3f 	bl	800080c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800038e:	f000 f84f 	bl	8000430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000392:	f7ff fedb 	bl	800014c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000396:	f000 f9ab 	bl	80006f0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800039a:	f7ff ff75 	bl	8000288 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	char uart2Data[24] = "Connected to UART Two\r\n";
 800039e:	4b1e      	ldr	r3, [pc, #120]	; (8000418 <main+0x94>)
 80003a0:	1d3c      	adds	r4, r7, #4
 80003a2:	461d      	mov	r5, r3
 80003a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80003ac:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&huart2, (uint8_t*) &uart2Data, sizeof(uart2Data),
 80003b0:	1d39      	adds	r1, r7, #4
 80003b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003b6:	2218      	movs	r2, #24
 80003b8:	4818      	ldr	r0, [pc, #96]	; (800041c <main+0x98>)
 80003ba:	f001 fc86 	bl	8001cca <HAL_UART_Transmit>
			0xFFFF);

	printf("\r\n");
 80003be:	4818      	ldr	r0, [pc, #96]	; (8000420 <main+0x9c>)
 80003c0:	f001 feba 	bl	8002138 <puts>

	printf("Scanning I2C bus:\r\n");
 80003c4:	4817      	ldr	r0, [pc, #92]	; (8000424 <main+0xa0>)
 80003c6:	f001 feb7 	bl	8002138 <puts>
	HAL_StatusTypeDef result;
	uint8_t i;
	for (i = 1; i < 128; i++) {
 80003ca:	2301      	movs	r3, #1
 80003cc:	77fb      	strb	r3, [r7, #31]
 80003ce:	e01b      	b.n	8000408 <main+0x84>
		 * &hi2c1 is the handle
		 * (uint16_t)(i<<1) is the i2c address left aligned
		 * retries 2
		 * timeout 2
		 */
		result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (i << 1), 2, 2);
 80003d0:	7ffb      	ldrb	r3, [r7, #31]
 80003d2:	b29b      	uxth	r3, r3
 80003d4:	005b      	lsls	r3, r3, #1
 80003d6:	b299      	uxth	r1, r3
 80003d8:	2302      	movs	r3, #2
 80003da:	2202      	movs	r2, #2
 80003dc:	4812      	ldr	r0, [pc, #72]	; (8000428 <main+0xa4>)
 80003de:	f000 fe87 	bl	80010f0 <HAL_I2C_IsDeviceReady>
 80003e2:	4603      	mov	r3, r0
 80003e4:	77bb      	strb	r3, [r7, #30]
		if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 80003e6:	7fbb      	ldrb	r3, [r7, #30]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d002      	beq.n	80003f2 <main+0x6e>
				{
			printf("."); // No ACK received at that address
 80003ec:	202e      	movs	r0, #46	; 0x2e
 80003ee:	f001 fe21 	bl	8002034 <putchar>
		}
		if (result == HAL_OK) {
 80003f2:	7fbb      	ldrb	r3, [r7, #30]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d104      	bne.n	8000402 <main+0x7e>
			printf("0x%X", i); // Received an ACK at that address
 80003f8:	7ffb      	ldrb	r3, [r7, #31]
 80003fa:	4619      	mov	r1, r3
 80003fc:	480b      	ldr	r0, [pc, #44]	; (800042c <main+0xa8>)
 80003fe:	f001 fe01 	bl	8002004 <iprintf>
	for (i = 1; i < 128; i++) {
 8000402:	7ffb      	ldrb	r3, [r7, #31]
 8000404:	3301      	adds	r3, #1
 8000406:	77fb      	strb	r3, [r7, #31]
 8000408:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800040c:	2b00      	cmp	r3, #0
 800040e:	dadf      	bge.n	80003d0 <main+0x4c>
		}
	}
	printf("\r\n");
 8000410:	4803      	ldr	r0, [pc, #12]	; (8000420 <main+0x9c>)
 8000412:	f001 fe91 	bl	8002138 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000416:	e7fe      	b.n	8000416 <main+0x92>
 8000418:	080030a0 	.word	0x080030a0
 800041c:	200000ec 	.word	0x200000ec
 8000420:	08003080 	.word	0x08003080
 8000424:	08003084 	.word	0x08003084
 8000428:	20000098 	.word	0x20000098
 800042c:	08003098 	.word	0x08003098

08000430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b090      	sub	sp, #64	; 0x40
 8000434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000436:	f107 0318 	add.w	r3, r7, #24
 800043a:	2228      	movs	r2, #40	; 0x28
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f001 fdd8 	bl	8001ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
 8000450:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000452:	2302      	movs	r3, #2
 8000454:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000456:	2301      	movs	r3, #1
 8000458:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800045a:	2310      	movs	r3, #16
 800045c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800045e:	2302      	movs	r3, #2
 8000460:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000462:	2300      	movs	r3, #0
 8000464:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000466:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800046a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046c:	f107 0318 	add.w	r3, r7, #24
 8000470:	4618      	mov	r0, r3
 8000472:	f000 ffc3 	bl	80013fc <HAL_RCC_OscConfig>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800047c:	f000 f82c 	bl	80004d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000480:	230f      	movs	r3, #15
 8000482:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000484:	2302      	movs	r3, #2
 8000486:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800048c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000490:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2102      	movs	r1, #2
 800049a:	4618      	mov	r0, r3
 800049c:	f001 fa2e 	bl	80018fc <HAL_RCC_ClockConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80004a6:	f000 f817 	bl	80004d8 <Error_Handler>
  }
}
 80004aa:	bf00      	nop
 80004ac:	3740      	adds	r7, #64	; 0x40
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80004bc:	1d39      	adds	r1, r7, #4
 80004be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004c2:	2201      	movs	r2, #1
 80004c4:	4803      	ldr	r0, [pc, #12]	; (80004d4 <__io_putchar+0x20>)
 80004c6:	f001 fc00 	bl	8001cca <HAL_UART_Transmit>

  return ch;
 80004ca:	687b      	ldr	r3, [r7, #4]
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	200000ec 	.word	0x200000ec

080004d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004dc:	b672      	cpsid	i
}
 80004de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <Error_Handler+0x8>
	...

080004e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ea:	4b15      	ldr	r3, [pc, #84]	; (8000540 <HAL_MspInit+0x5c>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	4a14      	ldr	r2, [pc, #80]	; (8000540 <HAL_MspInit+0x5c>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6193      	str	r3, [r2, #24]
 80004f6:	4b12      	ldr	r3, [pc, #72]	; (8000540 <HAL_MspInit+0x5c>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <HAL_MspInit+0x5c>)
 8000504:	69db      	ldr	r3, [r3, #28]
 8000506:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <HAL_MspInit+0x5c>)
 8000508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800050c:	61d3      	str	r3, [r2, #28]
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <HAL_MspInit+0x5c>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800051a:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <HAL_MspInit+0x60>)
 800051c:	685b      	ldr	r3, [r3, #4]
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	4a04      	ldr	r2, [pc, #16]	; (8000544 <HAL_MspInit+0x60>)
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	40021000 	.word	0x40021000
 8000544:	40010000 	.word	0x40010000

08000548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800054c:	e7fe      	b.n	800054c <NMI_Handler+0x4>

0800054e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000552:	e7fe      	b.n	8000552 <HardFault_Handler+0x4>

08000554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <MemManage_Handler+0x4>

0800055a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800055e:	e7fe      	b.n	800055e <BusFault_Handler+0x4>

08000560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <UsageFault_Handler+0x4>

08000566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr

08000572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr

0800057e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr

0800058a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800058e:	f000 f983 	bl	8000898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}

08000596 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800059a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800059e:	f000 fc41 	bl	8000e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b086      	sub	sp, #24
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	60f8      	str	r0, [r7, #12]
 80005ae:	60b9      	str	r1, [r7, #8]
 80005b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
 80005b6:	e00a      	b.n	80005ce <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005b8:	f3af 8000 	nop.w
 80005bc:	4601      	mov	r1, r0
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	1c5a      	adds	r2, r3, #1
 80005c2:	60ba      	str	r2, [r7, #8]
 80005c4:	b2ca      	uxtb	r2, r1
 80005c6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	3301      	adds	r3, #1
 80005cc:	617b      	str	r3, [r7, #20]
 80005ce:	697a      	ldr	r2, [r7, #20]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	dbf0      	blt.n	80005b8 <_read+0x12>
	}

return len;
 80005d6:	687b      	ldr	r3, [r7, #4]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3718      	adds	r7, #24
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	e009      	b.n	8000606 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	1c5a      	adds	r2, r3, #1
 80005f6:	60ba      	str	r2, [r7, #8]
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ff5a 	bl	80004b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	3301      	adds	r3, #1
 8000604:	617b      	str	r3, [r7, #20]
 8000606:	697a      	ldr	r2, [r7, #20]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	429a      	cmp	r2, r3
 800060c:	dbf1      	blt.n	80005f2 <_write+0x12>
	}
	return len;
 800060e:	687b      	ldr	r3, [r7, #4]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <_close>:

int _close(int file)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	return -1;
 8000620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000624:	4618      	mov	r0, r3
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr

0800062e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800062e:	b480      	push	{r7}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
 8000636:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800063e:	605a      	str	r2, [r3, #4]
	return 0;
 8000640:	2300      	movs	r3, #0
}
 8000642:	4618      	mov	r0, r3
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr

0800064c <_isatty>:

int _isatty(int file)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	return 1;
 8000654:	2301      	movs	r3, #1
}
 8000656:	4618      	mov	r0, r3
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
	return 0;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000680:	4a14      	ldr	r2, [pc, #80]	; (80006d4 <_sbrk+0x5c>)
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <_sbrk+0x60>)
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800068c:	4b13      	ldr	r3, [pc, #76]	; (80006dc <_sbrk+0x64>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d102      	bne.n	800069a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <_sbrk+0x64>)
 8000696:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <_sbrk+0x68>)
 8000698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <_sbrk+0x64>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	693a      	ldr	r2, [r7, #16]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d207      	bcs.n	80006b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006a8:	f001 fc7a 	bl	8001fa0 <__errno>
 80006ac:	4603      	mov	r3, r0
 80006ae:	220c      	movs	r2, #12
 80006b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006b6:	e009      	b.n	80006cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <_sbrk+0x64>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006be:	4b07      	ldr	r3, [pc, #28]	; (80006dc <_sbrk+0x64>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	4a05      	ldr	r2, [pc, #20]	; (80006dc <_sbrk+0x64>)
 80006c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ca:	68fb      	ldr	r3, [r7, #12]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20005000 	.word	0x20005000
 80006d8:	00000400 	.word	0x00000400
 80006dc:	2000008c 	.word	0x2000008c
 80006e0:	20000148 	.word	0x20000148

080006e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_USART2_UART_Init+0x4c>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <MX_USART2_UART_Init+0x50>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_USART2_UART_Init+0x4c>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_USART2_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000728:	f001 fa82 	bl	8001c30 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000732:	f7ff fed1 	bl	80004d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200000ec 	.word	0x200000ec
 8000740:	40004400 	.word	0x40004400

08000744 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <HAL_UART_MspInit+0x70>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d123      	bne.n	80007ac <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <HAL_UART_MspInit+0x74>)
 8000766:	69db      	ldr	r3, [r3, #28]
 8000768:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <HAL_UART_MspInit+0x74>)
 800076a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800076e:	61d3      	str	r3, [r2, #28]
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <HAL_UART_MspInit+0x74>)
 8000772:	69db      	ldr	r3, [r3, #28]
 8000774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_UART_MspInit+0x74>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <HAL_UART_MspInit+0x74>)
 8000782:	f043 0304 	orr.w	r3, r3, #4
 8000786:	6193      	str	r3, [r2, #24]
 8000788:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <HAL_UART_MspInit+0x74>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f003 0304 	and.w	r3, r3, #4
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000794:	230c      	movs	r3, #12
 8000796:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000798:	2302      	movs	r3, #2
 800079a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2302      	movs	r3, #2
 800079e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	4619      	mov	r1, r3
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <HAL_UART_MspInit+0x78>)
 80007a8:	f000 f9a0 	bl	8000aec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40004400 	.word	0x40004400
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010800 	.word	0x40010800

080007c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c0:	480c      	ldr	r0, [pc, #48]	; (80007f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007c2:	490d      	ldr	r1, [pc, #52]	; (80007f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007c4:	4a0d      	ldr	r2, [pc, #52]	; (80007fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c8:	e002      	b.n	80007d0 <LoopCopyDataInit>

080007ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ce:	3304      	adds	r3, #4

080007d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d4:	d3f9      	bcc.n	80007ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d6:	4a0a      	ldr	r2, [pc, #40]	; (8000800 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007d8:	4c0a      	ldr	r4, [pc, #40]	; (8000804 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007dc:	e001      	b.n	80007e2 <LoopFillZerobss>

080007de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e0:	3204      	adds	r2, #4

080007e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e4:	d3fb      	bcc.n	80007de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007e6:	f7ff ff7d 	bl	80006e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ea:	f001 fbdf 	bl	8001fac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ee:	f7ff fdc9 	bl	8000384 <main>
  bx lr
 80007f2:	4770      	bx	lr
  ldr r0, =_sdata
 80007f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007fc:	08003180 	.word	0x08003180
  ldr r2, =_sbss
 8000800:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000804:	20000144 	.word	0x20000144

08000808 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000808:	e7fe      	b.n	8000808 <ADC1_2_IRQHandler>
	...

0800080c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000810:	4b08      	ldr	r3, [pc, #32]	; (8000834 <HAL_Init+0x28>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a07      	ldr	r2, [pc, #28]	; (8000834 <HAL_Init+0x28>)
 8000816:	f043 0310 	orr.w	r3, r3, #16
 800081a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800081c:	2003      	movs	r0, #3
 800081e:	f000 f923 	bl	8000a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000822:	2000      	movs	r0, #0
 8000824:	f000 f808 	bl	8000838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000828:	f7ff fe5c 	bl	80004e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40022000 	.word	0x40022000

08000838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <HAL_InitTick+0x54>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <HAL_InitTick+0x58>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	4619      	mov	r1, r3
 800084a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800084e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000852:	fbb2 f3f3 	udiv	r3, r2, r3
 8000856:	4618      	mov	r0, r3
 8000858:	f000 f93b 	bl	8000ad2 <HAL_SYSTICK_Config>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	e00e      	b.n	8000884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b0f      	cmp	r3, #15
 800086a:	d80a      	bhi.n	8000882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800086c:	2200      	movs	r2, #0
 800086e:	6879      	ldr	r1, [r7, #4]
 8000870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000874:	f000 f903 	bl	8000a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000878:	4a06      	ldr	r2, [pc, #24]	; (8000894 <HAL_InitTick+0x5c>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800087e:	2300      	movs	r3, #0
 8000880:	e000      	b.n	8000884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000000 	.word	0x20000000
 8000890:	20000008 	.word	0x20000008
 8000894:	20000004 	.word	0x20000004

08000898 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <HAL_IncTick+0x1c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <HAL_IncTick+0x20>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4413      	add	r3, r2
 80008a8:	4a03      	ldr	r2, [pc, #12]	; (80008b8 <HAL_IncTick+0x20>)
 80008aa:	6013      	str	r3, [r2, #0]
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	20000008 	.word	0x20000008
 80008b8:	20000130 	.word	0x20000130

080008bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return uwTick;
 80008c0:	4b02      	ldr	r3, [pc, #8]	; (80008cc <HAL_GetTick+0x10>)
 80008c2:	681b      	ldr	r3, [r3, #0]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr
 80008cc:	20000130 	.word	0x20000130

080008d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ec:	4013      	ands	r3, r2
 80008ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	60d3      	str	r3, [r2, #12]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <__NVIC_GetPriorityGrouping+0x18>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	0a1b      	lsrs	r3, r3, #8
 8000922:	f003 0307 	and.w	r3, r3, #7
}
 8000926:	4618      	mov	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	2b00      	cmp	r3, #0
 8000944:	db0b      	blt.n	800095e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	f003 021f 	and.w	r2, r3, #31
 800094c:	4906      	ldr	r1, [pc, #24]	; (8000968 <__NVIC_EnableIRQ+0x34>)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	095b      	lsrs	r3, r3, #5
 8000954:	2001      	movs	r0, #1
 8000956:	fa00 f202 	lsl.w	r2, r0, r2
 800095a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	e000e100 	.word	0xe000e100

0800096c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	6039      	str	r1, [r7, #0]
 8000976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097c:	2b00      	cmp	r3, #0
 800097e:	db0a      	blt.n	8000996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	b2da      	uxtb	r2, r3
 8000984:	490c      	ldr	r1, [pc, #48]	; (80009b8 <__NVIC_SetPriority+0x4c>)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	0112      	lsls	r2, r2, #4
 800098c:	b2d2      	uxtb	r2, r2
 800098e:	440b      	add	r3, r1
 8000990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000994:	e00a      	b.n	80009ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4908      	ldr	r1, [pc, #32]	; (80009bc <__NVIC_SetPriority+0x50>)
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	f003 030f 	and.w	r3, r3, #15
 80009a2:	3b04      	subs	r3, #4
 80009a4:	0112      	lsls	r2, r2, #4
 80009a6:	b2d2      	uxtb	r2, r2
 80009a8:	440b      	add	r3, r1
 80009aa:	761a      	strb	r2, [r3, #24]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000e100 	.word	0xe000e100
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b089      	sub	sp, #36	; 0x24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	f1c3 0307 	rsb	r3, r3, #7
 80009da:	2b04      	cmp	r3, #4
 80009dc:	bf28      	it	cs
 80009de:	2304      	movcs	r3, #4
 80009e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3304      	adds	r3, #4
 80009e6:	2b06      	cmp	r3, #6
 80009e8:	d902      	bls.n	80009f0 <NVIC_EncodePriority+0x30>
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3b03      	subs	r3, #3
 80009ee:	e000      	b.n	80009f2 <NVIC_EncodePriority+0x32>
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43da      	mvns	r2, r3
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	401a      	ands	r2, r3
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a12:	43d9      	mvns	r1, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	4313      	orrs	r3, r2
         );
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3724      	adds	r7, #36	; 0x24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a34:	d301      	bcc.n	8000a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a36:	2301      	movs	r3, #1
 8000a38:	e00f      	b.n	8000a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <SysTick_Config+0x40>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a42:	210f      	movs	r1, #15
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a48:	f7ff ff90 	bl	800096c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <SysTick_Config+0x40>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a52:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <SysTick_Config+0x40>)
 8000a54:	2207      	movs	r2, #7
 8000a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	e000e010 	.word	0xe000e010

08000a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff ff2d 	bl	80008d0 <__NVIC_SetPriorityGrouping>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b086      	sub	sp, #24
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	4603      	mov	r3, r0
 8000a86:	60b9      	str	r1, [r7, #8]
 8000a88:	607a      	str	r2, [r7, #4]
 8000a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a90:	f7ff ff42 	bl	8000918 <__NVIC_GetPriorityGrouping>
 8000a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	68b9      	ldr	r1, [r7, #8]
 8000a9a:	6978      	ldr	r0, [r7, #20]
 8000a9c:	f7ff ff90 	bl	80009c0 <NVIC_EncodePriority>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff5f 	bl	800096c <__NVIC_SetPriority>
}
 8000aae:	bf00      	nop
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	4603      	mov	r3, r0
 8000abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff35 	bl	8000934 <__NVIC_EnableIRQ>
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff ffa2 	bl	8000a24 <SysTick_Config>
 8000ae0:	4603      	mov	r3, r0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b08b      	sub	sp, #44	; 0x2c
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000afe:	e169      	b.n	8000dd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b00:	2201      	movs	r2, #1
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	69fa      	ldr	r2, [r7, #28]
 8000b10:	4013      	ands	r3, r2
 8000b12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	f040 8158 	bne.w	8000dce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	4a9a      	ldr	r2, [pc, #616]	; (8000d8c <HAL_GPIO_Init+0x2a0>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d05e      	beq.n	8000be6 <HAL_GPIO_Init+0xfa>
 8000b28:	4a98      	ldr	r2, [pc, #608]	; (8000d8c <HAL_GPIO_Init+0x2a0>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d875      	bhi.n	8000c1a <HAL_GPIO_Init+0x12e>
 8000b2e:	4a98      	ldr	r2, [pc, #608]	; (8000d90 <HAL_GPIO_Init+0x2a4>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d058      	beq.n	8000be6 <HAL_GPIO_Init+0xfa>
 8000b34:	4a96      	ldr	r2, [pc, #600]	; (8000d90 <HAL_GPIO_Init+0x2a4>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d86f      	bhi.n	8000c1a <HAL_GPIO_Init+0x12e>
 8000b3a:	4a96      	ldr	r2, [pc, #600]	; (8000d94 <HAL_GPIO_Init+0x2a8>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d052      	beq.n	8000be6 <HAL_GPIO_Init+0xfa>
 8000b40:	4a94      	ldr	r2, [pc, #592]	; (8000d94 <HAL_GPIO_Init+0x2a8>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d869      	bhi.n	8000c1a <HAL_GPIO_Init+0x12e>
 8000b46:	4a94      	ldr	r2, [pc, #592]	; (8000d98 <HAL_GPIO_Init+0x2ac>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d04c      	beq.n	8000be6 <HAL_GPIO_Init+0xfa>
 8000b4c:	4a92      	ldr	r2, [pc, #584]	; (8000d98 <HAL_GPIO_Init+0x2ac>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d863      	bhi.n	8000c1a <HAL_GPIO_Init+0x12e>
 8000b52:	4a92      	ldr	r2, [pc, #584]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d046      	beq.n	8000be6 <HAL_GPIO_Init+0xfa>
 8000b58:	4a90      	ldr	r2, [pc, #576]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d85d      	bhi.n	8000c1a <HAL_GPIO_Init+0x12e>
 8000b5e:	2b12      	cmp	r3, #18
 8000b60:	d82a      	bhi.n	8000bb8 <HAL_GPIO_Init+0xcc>
 8000b62:	2b12      	cmp	r3, #18
 8000b64:	d859      	bhi.n	8000c1a <HAL_GPIO_Init+0x12e>
 8000b66:	a201      	add	r2, pc, #4	; (adr r2, 8000b6c <HAL_GPIO_Init+0x80>)
 8000b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b6c:	08000be7 	.word	0x08000be7
 8000b70:	08000bc1 	.word	0x08000bc1
 8000b74:	08000bd3 	.word	0x08000bd3
 8000b78:	08000c15 	.word	0x08000c15
 8000b7c:	08000c1b 	.word	0x08000c1b
 8000b80:	08000c1b 	.word	0x08000c1b
 8000b84:	08000c1b 	.word	0x08000c1b
 8000b88:	08000c1b 	.word	0x08000c1b
 8000b8c:	08000c1b 	.word	0x08000c1b
 8000b90:	08000c1b 	.word	0x08000c1b
 8000b94:	08000c1b 	.word	0x08000c1b
 8000b98:	08000c1b 	.word	0x08000c1b
 8000b9c:	08000c1b 	.word	0x08000c1b
 8000ba0:	08000c1b 	.word	0x08000c1b
 8000ba4:	08000c1b 	.word	0x08000c1b
 8000ba8:	08000c1b 	.word	0x08000c1b
 8000bac:	08000c1b 	.word	0x08000c1b
 8000bb0:	08000bc9 	.word	0x08000bc9
 8000bb4:	08000bdd 	.word	0x08000bdd
 8000bb8:	4a79      	ldr	r2, [pc, #484]	; (8000da0 <HAL_GPIO_Init+0x2b4>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d013      	beq.n	8000be6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bbe:	e02c      	b.n	8000c1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	623b      	str	r3, [r7, #32]
          break;
 8000bc6:	e029      	b.n	8000c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	3304      	adds	r3, #4
 8000bce:	623b      	str	r3, [r7, #32]
          break;
 8000bd0:	e024      	b.n	8000c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	3308      	adds	r3, #8
 8000bd8:	623b      	str	r3, [r7, #32]
          break;
 8000bda:	e01f      	b.n	8000c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	330c      	adds	r3, #12
 8000be2:	623b      	str	r3, [r7, #32]
          break;
 8000be4:	e01a      	b.n	8000c1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d102      	bne.n	8000bf4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bee:	2304      	movs	r3, #4
 8000bf0:	623b      	str	r3, [r7, #32]
          break;
 8000bf2:	e013      	b.n	8000c1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d105      	bne.n	8000c08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	69fa      	ldr	r2, [r7, #28]
 8000c04:	611a      	str	r2, [r3, #16]
          break;
 8000c06:	e009      	b.n	8000c1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c08:	2308      	movs	r3, #8
 8000c0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	69fa      	ldr	r2, [r7, #28]
 8000c10:	615a      	str	r2, [r3, #20]
          break;
 8000c12:	e003      	b.n	8000c1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
          break;
 8000c18:	e000      	b.n	8000c1c <HAL_GPIO_Init+0x130>
          break;
 8000c1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	2bff      	cmp	r3, #255	; 0xff
 8000c20:	d801      	bhi.n	8000c26 <HAL_GPIO_Init+0x13a>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	e001      	b.n	8000c2a <HAL_GPIO_Init+0x13e>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	2bff      	cmp	r3, #255	; 0xff
 8000c30:	d802      	bhi.n	8000c38 <HAL_GPIO_Init+0x14c>
 8000c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	e002      	b.n	8000c3e <HAL_GPIO_Init+0x152>
 8000c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3a:	3b08      	subs	r3, #8
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	210f      	movs	r1, #15
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	401a      	ands	r2, r3
 8000c50:	6a39      	ldr	r1, [r7, #32]
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	fa01 f303 	lsl.w	r3, r1, r3
 8000c58:	431a      	orrs	r2, r3
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f000 80b1 	beq.w	8000dce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c6c:	4b4d      	ldr	r3, [pc, #308]	; (8000da4 <HAL_GPIO_Init+0x2b8>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a4c      	ldr	r2, [pc, #304]	; (8000da4 <HAL_GPIO_Init+0x2b8>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b4a      	ldr	r3, [pc, #296]	; (8000da4 <HAL_GPIO_Init+0x2b8>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c84:	4a48      	ldr	r2, [pc, #288]	; (8000da8 <HAL_GPIO_Init+0x2bc>)
 8000c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c88:	089b      	lsrs	r3, r3, #2
 8000c8a:	3302      	adds	r3, #2
 8000c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	f003 0303 	and.w	r3, r3, #3
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	220f      	movs	r2, #15
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a40      	ldr	r2, [pc, #256]	; (8000dac <HAL_GPIO_Init+0x2c0>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d013      	beq.n	8000cd8 <HAL_GPIO_Init+0x1ec>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a3f      	ldr	r2, [pc, #252]	; (8000db0 <HAL_GPIO_Init+0x2c4>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d00d      	beq.n	8000cd4 <HAL_GPIO_Init+0x1e8>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a3e      	ldr	r2, [pc, #248]	; (8000db4 <HAL_GPIO_Init+0x2c8>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d007      	beq.n	8000cd0 <HAL_GPIO_Init+0x1e4>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a3d      	ldr	r2, [pc, #244]	; (8000db8 <HAL_GPIO_Init+0x2cc>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d101      	bne.n	8000ccc <HAL_GPIO_Init+0x1e0>
 8000cc8:	2303      	movs	r3, #3
 8000cca:	e006      	b.n	8000cda <HAL_GPIO_Init+0x1ee>
 8000ccc:	2304      	movs	r3, #4
 8000cce:	e004      	b.n	8000cda <HAL_GPIO_Init+0x1ee>
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	e002      	b.n	8000cda <HAL_GPIO_Init+0x1ee>
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e000      	b.n	8000cda <HAL_GPIO_Init+0x1ee>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cdc:	f002 0203 	and.w	r2, r2, #3
 8000ce0:	0092      	lsls	r2, r2, #2
 8000ce2:	4093      	lsls	r3, r2
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cea:	492f      	ldr	r1, [pc, #188]	; (8000da8 <HAL_GPIO_Init+0x2bc>)
 8000cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cee:	089b      	lsrs	r3, r3, #2
 8000cf0:	3302      	adds	r3, #2
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d006      	beq.n	8000d12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d04:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <HAL_GPIO_Init+0x2d0>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	492c      	ldr	r1, [pc, #176]	; (8000dbc <HAL_GPIO_Init+0x2d0>)
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	600b      	str	r3, [r1, #0]
 8000d10:	e006      	b.n	8000d20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d12:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <HAL_GPIO_Init+0x2d0>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	4928      	ldr	r1, [pc, #160]	; (8000dbc <HAL_GPIO_Init+0x2d0>)
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d006      	beq.n	8000d3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d2c:	4b23      	ldr	r3, [pc, #140]	; (8000dbc <HAL_GPIO_Init+0x2d0>)
 8000d2e:	685a      	ldr	r2, [r3, #4]
 8000d30:	4922      	ldr	r1, [pc, #136]	; (8000dbc <HAL_GPIO_Init+0x2d0>)
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	604b      	str	r3, [r1, #4]
 8000d38:	e006      	b.n	8000d48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d3a:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <HAL_GPIO_Init+0x2d0>)
 8000d3c:	685a      	ldr	r2, [r3, #4]
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	43db      	mvns	r3, r3
 8000d42:	491e      	ldr	r1, [pc, #120]	; (8000dbc <HAL_GPIO_Init+0x2d0>)
 8000d44:	4013      	ands	r3, r2
 8000d46:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d006      	beq.n	8000d62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d54:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <HAL_GPIO_Init+0x2d0>)
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	4918      	ldr	r1, [pc, #96]	; (8000dbc <HAL_GPIO_Init+0x2d0>)
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	608b      	str	r3, [r1, #8]
 8000d60:	e006      	b.n	8000d70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <HAL_GPIO_Init+0x2d0>)
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	4914      	ldr	r1, [pc, #80]	; (8000dbc <HAL_GPIO_Init+0x2d0>)
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d021      	beq.n	8000dc0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <HAL_GPIO_Init+0x2d0>)
 8000d7e:	68da      	ldr	r2, [r3, #12]
 8000d80:	490e      	ldr	r1, [pc, #56]	; (8000dbc <HAL_GPIO_Init+0x2d0>)
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	60cb      	str	r3, [r1, #12]
 8000d88:	e021      	b.n	8000dce <HAL_GPIO_Init+0x2e2>
 8000d8a:	bf00      	nop
 8000d8c:	10320000 	.word	0x10320000
 8000d90:	10310000 	.word	0x10310000
 8000d94:	10220000 	.word	0x10220000
 8000d98:	10210000 	.word	0x10210000
 8000d9c:	10120000 	.word	0x10120000
 8000da0:	10110000 	.word	0x10110000
 8000da4:	40021000 	.word	0x40021000
 8000da8:	40010000 	.word	0x40010000
 8000dac:	40010800 	.word	0x40010800
 8000db0:	40010c00 	.word	0x40010c00
 8000db4:	40011000 	.word	0x40011000
 8000db8:	40011400 	.word	0x40011400
 8000dbc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <HAL_GPIO_Init+0x304>)
 8000dc2:	68da      	ldr	r2, [r3, #12]
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	4909      	ldr	r1, [pc, #36]	; (8000df0 <HAL_GPIO_Init+0x304>)
 8000dca:	4013      	ands	r3, r2
 8000dcc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dda:	fa22 f303 	lsr.w	r3, r2, r3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f47f ae8e 	bne.w	8000b00 <HAL_GPIO_Init+0x14>
  }
}
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
 8000de8:	372c      	adds	r7, #44	; 0x2c
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	40010400 	.word	0x40010400

08000df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	807b      	strh	r3, [r7, #2]
 8000e00:	4613      	mov	r3, r2
 8000e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e04:	787b      	ldrb	r3, [r7, #1]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e0a:	887a      	ldrh	r2, [r7, #2]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e10:	e003      	b.n	8000e1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e12:	887b      	ldrh	r3, [r7, #2]
 8000e14:	041a      	lsls	r2, r3, #16
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	611a      	str	r2, [r3, #16]
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e30:	695a      	ldr	r2, [r3, #20]
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	4013      	ands	r3, r2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d006      	beq.n	8000e48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e3c:	88fb      	ldrh	r3, [r7, #6]
 8000e3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e40:	88fb      	ldrh	r3, [r7, #6]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f806 	bl	8000e54 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40010400 	.word	0x40010400

08000e54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d101      	bne.n	8000e7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e12b      	b.n	80010d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d106      	bne.n	8000e94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff fa28 	bl	80002e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2224      	movs	r2, #36	; 0x24
 8000e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f022 0201 	bic.w	r2, r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000eba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000eca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ecc:	f000 fe6a 	bl	8001ba4 <HAL_RCC_GetPCLK1Freq>
 8000ed0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	4a81      	ldr	r2, [pc, #516]	; (80010dc <HAL_I2C_Init+0x274>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d807      	bhi.n	8000eec <HAL_I2C_Init+0x84>
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4a80      	ldr	r2, [pc, #512]	; (80010e0 <HAL_I2C_Init+0x278>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	bf94      	ite	ls
 8000ee4:	2301      	movls	r3, #1
 8000ee6:	2300      	movhi	r3, #0
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	e006      	b.n	8000efa <HAL_I2C_Init+0x92>
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4a7d      	ldr	r2, [pc, #500]	; (80010e4 <HAL_I2C_Init+0x27c>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	bf94      	ite	ls
 8000ef4:	2301      	movls	r3, #1
 8000ef6:	2300      	movhi	r3, #0
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e0e7      	b.n	80010d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	4a78      	ldr	r2, [pc, #480]	; (80010e8 <HAL_I2C_Init+0x280>)
 8000f06:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0a:	0c9b      	lsrs	r3, r3, #18
 8000f0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	68ba      	ldr	r2, [r7, #8]
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6a1b      	ldr	r3, [r3, #32]
 8000f28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	4a6a      	ldr	r2, [pc, #424]	; (80010dc <HAL_I2C_Init+0x274>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d802      	bhi.n	8000f3c <HAL_I2C_Init+0xd4>
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	e009      	b.n	8000f50 <HAL_I2C_Init+0xe8>
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f42:	fb02 f303 	mul.w	r3, r2, r3
 8000f46:	4a69      	ldr	r2, [pc, #420]	; (80010ec <HAL_I2C_Init+0x284>)
 8000f48:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4c:	099b      	lsrs	r3, r3, #6
 8000f4e:	3301      	adds	r3, #1
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	6812      	ldr	r2, [r2, #0]
 8000f54:	430b      	orrs	r3, r1
 8000f56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000f62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	495c      	ldr	r1, [pc, #368]	; (80010dc <HAL_I2C_Init+0x274>)
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d819      	bhi.n	8000fa4 <HAL_I2C_Init+0x13c>
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	1e59      	subs	r1, r3, #1
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f7e:	1c59      	adds	r1, r3, #1
 8000f80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000f84:	400b      	ands	r3, r1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d00a      	beq.n	8000fa0 <HAL_I2C_Init+0x138>
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	1e59      	subs	r1, r3, #1
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f98:	3301      	adds	r3, #1
 8000f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f9e:	e051      	b.n	8001044 <HAL_I2C_Init+0x1dc>
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	e04f      	b.n	8001044 <HAL_I2C_Init+0x1dc>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d111      	bne.n	8000fd0 <HAL_I2C_Init+0x168>
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	1e58      	subs	r0, r3, #1
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6859      	ldr	r1, [r3, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	440b      	add	r3, r1
 8000fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	bf0c      	ite	eq
 8000fc8:	2301      	moveq	r3, #1
 8000fca:	2300      	movne	r3, #0
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	e012      	b.n	8000ff6 <HAL_I2C_Init+0x18e>
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	1e58      	subs	r0, r3, #1
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6859      	ldr	r1, [r3, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	440b      	add	r3, r1
 8000fde:	0099      	lsls	r1, r3, #2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	bf0c      	ite	eq
 8000ff0:	2301      	moveq	r3, #1
 8000ff2:	2300      	movne	r3, #0
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_I2C_Init+0x196>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e022      	b.n	8001044 <HAL_I2C_Init+0x1dc>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d10e      	bne.n	8001024 <HAL_I2C_Init+0x1bc>
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	1e58      	subs	r0, r3, #1
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6859      	ldr	r1, [r3, #4]
 800100e:	460b      	mov	r3, r1
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	440b      	add	r3, r1
 8001014:	fbb0 f3f3 	udiv	r3, r0, r3
 8001018:	3301      	adds	r3, #1
 800101a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800101e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001022:	e00f      	b.n	8001044 <HAL_I2C_Init+0x1dc>
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	1e58      	subs	r0, r3, #1
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6859      	ldr	r1, [r3, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	0099      	lsls	r1, r3, #2
 8001034:	440b      	add	r3, r1
 8001036:	fbb0 f3f3 	udiv	r3, r0, r3
 800103a:	3301      	adds	r3, #1
 800103c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001040:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	6809      	ldr	r1, [r1, #0]
 8001048:	4313      	orrs	r3, r2
 800104a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69da      	ldr	r2, [r3, #28]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	431a      	orrs	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	430a      	orrs	r2, r1
 8001066:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001072:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	6911      	ldr	r1, [r2, #16]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68d2      	ldr	r2, [r2, #12]
 800107e:	4311      	orrs	r1, r2
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	6812      	ldr	r2, [r2, #0]
 8001084:	430b      	orrs	r3, r1
 8001086:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	695a      	ldr	r2, [r3, #20]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	431a      	orrs	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f042 0201 	orr.w	r2, r2, #1
 80010b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2220      	movs	r2, #32
 80010be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	000186a0 	.word	0x000186a0
 80010e0:	001e847f 	.word	0x001e847f
 80010e4:	003d08ff 	.word	0x003d08ff
 80010e8:	431bde83 	.word	0x431bde83
 80010ec:	10624dd3 	.word	0x10624dd3

080010f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	460b      	mov	r3, r1
 80010fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001100:	f7ff fbdc 	bl	80008bc <HAL_GetTick>
 8001104:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001106:	2301      	movs	r3, #1
 8001108:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b20      	cmp	r3, #32
 8001114:	f040 8111 	bne.w	800133a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2319      	movs	r3, #25
 800111e:	2201      	movs	r2, #1
 8001120:	4988      	ldr	r1, [pc, #544]	; (8001344 <HAL_I2C_IsDeviceReady+0x254>)
 8001122:	68f8      	ldr	r0, [r7, #12]
 8001124:	f000 f912 	bl	800134c <I2C_WaitOnFlagUntilTimeout>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800112e:	2302      	movs	r3, #2
 8001130:	e104      	b.n	800133c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001138:	2b01      	cmp	r3, #1
 800113a:	d101      	bne.n	8001140 <HAL_I2C_IsDeviceReady+0x50>
 800113c:	2302      	movs	r3, #2
 800113e:	e0fd      	b.n	800133c <HAL_I2C_IsDeviceReady+0x24c>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2201      	movs	r2, #1
 8001144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b01      	cmp	r3, #1
 8001154:	d007      	beq.n	8001166 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f042 0201 	orr.w	r2, r2, #1
 8001164:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001174:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2224      	movs	r2, #36	; 0x24
 800117a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2200      	movs	r2, #0
 8001182:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4a70      	ldr	r2, [pc, #448]	; (8001348 <HAL_I2C_IsDeviceReady+0x258>)
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001198:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	f000 f8d0 	bl	800134c <I2C_WaitOnFlagUntilTimeout>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d00d      	beq.n	80011ce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011c0:	d103      	bne.n	80011ca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e0b6      	b.n	800133c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80011ce:	897b      	ldrh	r3, [r7, #10]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	461a      	mov	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80011dc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80011de:	f7ff fb6d 	bl	80008bc <HAL_GetTick>
 80011e2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	bf0c      	ite	eq
 80011f2:	2301      	moveq	r3, #1
 80011f4:	2300      	movne	r3, #0
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001208:	bf0c      	ite	eq
 800120a:	2301      	moveq	r3, #1
 800120c:	2300      	movne	r3, #0
 800120e:	b2db      	uxtb	r3, r3
 8001210:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001212:	e025      	b.n	8001260 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001214:	f7ff fb52 	bl	80008bc <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	429a      	cmp	r2, r3
 8001222:	d302      	bcc.n	800122a <HAL_I2C_IsDeviceReady+0x13a>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d103      	bne.n	8001232 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	22a0      	movs	r2, #160	; 0xa0
 800122e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b02      	cmp	r3, #2
 800123e:	bf0c      	ite	eq
 8001240:	2301      	moveq	r3, #1
 8001242:	2300      	movne	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001256:	bf0c      	ite	eq
 8001258:	2301      	moveq	r3, #1
 800125a:	2300      	movne	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2ba0      	cmp	r3, #160	; 0xa0
 800126a:	d005      	beq.n	8001278 <HAL_I2C_IsDeviceReady+0x188>
 800126c:	7dfb      	ldrb	r3, [r7, #23]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d102      	bne.n	8001278 <HAL_I2C_IsDeviceReady+0x188>
 8001272:	7dbb      	ldrb	r3, [r7, #22]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0cd      	beq.n	8001214 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2220      	movs	r2, #32
 800127c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b02      	cmp	r3, #2
 800128c:	d129      	bne.n	80012e2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800129c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	2319      	movs	r3, #25
 80012ba:	2201      	movs	r2, #1
 80012bc:	4921      	ldr	r1, [pc, #132]	; (8001344 <HAL_I2C_IsDeviceReady+0x254>)
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f000 f844 	bl	800134c <I2C_WaitOnFlagUntilTimeout>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e036      	b.n	800133c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2220      	movs	r2, #32
 80012d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	e02c      	b.n	800133c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012f0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80012fa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2319      	movs	r3, #25
 8001302:	2201      	movs	r2, #1
 8001304:	490f      	ldr	r1, [pc, #60]	; (8001344 <HAL_I2C_IsDeviceReady+0x254>)
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f000 f820 	bl	800134c <I2C_WaitOnFlagUntilTimeout>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e012      	b.n	800133c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	3301      	adds	r3, #1
 800131a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	429a      	cmp	r2, r3
 8001322:	f4ff af32 	bcc.w	800118a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2220      	movs	r2, #32
 800132a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800133a:	2302      	movs	r3, #2
  }
}
 800133c:	4618      	mov	r0, r3
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	00100002 	.word	0x00100002
 8001348:	ffff0000 	.word	0xffff0000

0800134c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	4613      	mov	r3, r2
 800135a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800135c:	e025      	b.n	80013aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001364:	d021      	beq.n	80013aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001366:	f7ff faa9 	bl	80008bc <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	429a      	cmp	r2, r3
 8001374:	d302      	bcc.n	800137c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d116      	bne.n	80013aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2200      	movs	r2, #0
 8001380:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2220      	movs	r2, #32
 8001386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f043 0220 	orr.w	r2, r3, #32
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e023      	b.n	80013f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	0c1b      	lsrs	r3, r3, #16
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d10d      	bne.n	80013d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	4013      	ands	r3, r2
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	bf0c      	ite	eq
 80013c6:	2301      	moveq	r3, #1
 80013c8:	2300      	movne	r3, #0
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	e00c      	b.n	80013ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	43da      	mvns	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4013      	ands	r3, r2
 80013dc:	b29b      	uxth	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	bf0c      	ite	eq
 80013e2:	2301      	moveq	r3, #1
 80013e4:	2300      	movne	r3, #0
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d0b6      	beq.n	800135e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e26c      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 8087 	beq.w	800152a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800141c:	4b92      	ldr	r3, [pc, #584]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 030c 	and.w	r3, r3, #12
 8001424:	2b04      	cmp	r3, #4
 8001426:	d00c      	beq.n	8001442 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001428:	4b8f      	ldr	r3, [pc, #572]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 030c 	and.w	r3, r3, #12
 8001430:	2b08      	cmp	r3, #8
 8001432:	d112      	bne.n	800145a <HAL_RCC_OscConfig+0x5e>
 8001434:	4b8c      	ldr	r3, [pc, #560]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001440:	d10b      	bne.n	800145a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001442:	4b89      	ldr	r3, [pc, #548]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d06c      	beq.n	8001528 <HAL_RCC_OscConfig+0x12c>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d168      	bne.n	8001528 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e246      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001462:	d106      	bne.n	8001472 <HAL_RCC_OscConfig+0x76>
 8001464:	4b80      	ldr	r3, [pc, #512]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a7f      	ldr	r2, [pc, #508]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 800146a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	e02e      	b.n	80014d0 <HAL_RCC_OscConfig+0xd4>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10c      	bne.n	8001494 <HAL_RCC_OscConfig+0x98>
 800147a:	4b7b      	ldr	r3, [pc, #492]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a7a      	ldr	r2, [pc, #488]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	4b78      	ldr	r3, [pc, #480]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a77      	ldr	r2, [pc, #476]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 800148c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e01d      	b.n	80014d0 <HAL_RCC_OscConfig+0xd4>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800149c:	d10c      	bne.n	80014b8 <HAL_RCC_OscConfig+0xbc>
 800149e:	4b72      	ldr	r3, [pc, #456]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a71      	ldr	r2, [pc, #452]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	4b6f      	ldr	r3, [pc, #444]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a6e      	ldr	r2, [pc, #440]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	e00b      	b.n	80014d0 <HAL_RCC_OscConfig+0xd4>
 80014b8:	4b6b      	ldr	r3, [pc, #428]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a6a      	ldr	r2, [pc, #424]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b68      	ldr	r3, [pc, #416]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a67      	ldr	r2, [pc, #412]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d013      	beq.n	8001500 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff f9f0 	bl	80008bc <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff f9ec 	bl	80008bc <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	; 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e1fa      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	4b5d      	ldr	r3, [pc, #372]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0xe4>
 80014fe:	e014      	b.n	800152a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff f9dc 	bl	80008bc <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001508:	f7ff f9d8 	bl	80008bc <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	; 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e1e6      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151a:	4b53      	ldr	r3, [pc, #332]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x10c>
 8001526:	e000      	b.n	800152a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d063      	beq.n	80015fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001536:	4b4c      	ldr	r3, [pc, #304]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00b      	beq.n	800155a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001542:	4b49      	ldr	r3, [pc, #292]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	2b08      	cmp	r3, #8
 800154c:	d11c      	bne.n	8001588 <HAL_RCC_OscConfig+0x18c>
 800154e:	4b46      	ldr	r3, [pc, #280]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d116      	bne.n	8001588 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155a:	4b43      	ldr	r3, [pc, #268]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d005      	beq.n	8001572 <HAL_RCC_OscConfig+0x176>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d001      	beq.n	8001572 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e1ba      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001572:	4b3d      	ldr	r3, [pc, #244]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4939      	ldr	r1, [pc, #228]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001582:	4313      	orrs	r3, r2
 8001584:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001586:	e03a      	b.n	80015fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d020      	beq.n	80015d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001590:	4b36      	ldr	r3, [pc, #216]	; (800166c <HAL_RCC_OscConfig+0x270>)
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001596:	f7ff f991 	bl	80008bc <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159e:	f7ff f98d 	bl	80008bc <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e19b      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b0:	4b2d      	ldr	r3, [pc, #180]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015bc:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	4927      	ldr	r1, [pc, #156]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	600b      	str	r3, [r1, #0]
 80015d0:	e015      	b.n	80015fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <HAL_RCC_OscConfig+0x270>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff f970 	bl	80008bc <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e0:	f7ff f96c 	bl	80008bc <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e17a      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f2:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d03a      	beq.n	8001680 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d019      	beq.n	8001646 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_RCC_OscConfig+0x274>)
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001618:	f7ff f950 	bl	80008bc <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001620:	f7ff f94c 	bl	80008bc <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e15a      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800163e:	2001      	movs	r0, #1
 8001640:	f000 fad8 	bl	8001bf4 <RCC_Delay>
 8001644:	e01c      	b.n	8001680 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <HAL_RCC_OscConfig+0x274>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164c:	f7ff f936 	bl	80008bc <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001652:	e00f      	b.n	8001674 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001654:	f7ff f932 	bl	80008bc <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d908      	bls.n	8001674 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e140      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000
 800166c:	42420000 	.word	0x42420000
 8001670:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001674:	4b9e      	ldr	r3, [pc, #632]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1e9      	bne.n	8001654 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 80a6 	beq.w	80017da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001692:	4b97      	ldr	r3, [pc, #604]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10d      	bne.n	80016ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	4b94      	ldr	r3, [pc, #592]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	4a93      	ldr	r2, [pc, #588]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a8:	61d3      	str	r3, [r2, #28]
 80016aa:	4b91      	ldr	r3, [pc, #580]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b6:	2301      	movs	r3, #1
 80016b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ba:	4b8e      	ldr	r3, [pc, #568]	; (80018f4 <HAL_RCC_OscConfig+0x4f8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d118      	bne.n	80016f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c6:	4b8b      	ldr	r3, [pc, #556]	; (80018f4 <HAL_RCC_OscConfig+0x4f8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a8a      	ldr	r2, [pc, #552]	; (80018f4 <HAL_RCC_OscConfig+0x4f8>)
 80016cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d2:	f7ff f8f3 	bl	80008bc <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016da:	f7ff f8ef 	bl	80008bc <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b64      	cmp	r3, #100	; 0x64
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e0fd      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ec:	4b81      	ldr	r3, [pc, #516]	; (80018f4 <HAL_RCC_OscConfig+0x4f8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d106      	bne.n	800170e <HAL_RCC_OscConfig+0x312>
 8001700:	4b7b      	ldr	r3, [pc, #492]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	4a7a      	ldr	r2, [pc, #488]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6213      	str	r3, [r2, #32]
 800170c:	e02d      	b.n	800176a <HAL_RCC_OscConfig+0x36e>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0x334>
 8001716:	4b76      	ldr	r3, [pc, #472]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4a75      	ldr	r2, [pc, #468]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	6213      	str	r3, [r2, #32]
 8001722:	4b73      	ldr	r3, [pc, #460]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	4a72      	ldr	r2, [pc, #456]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001728:	f023 0304 	bic.w	r3, r3, #4
 800172c:	6213      	str	r3, [r2, #32]
 800172e:	e01c      	b.n	800176a <HAL_RCC_OscConfig+0x36e>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	2b05      	cmp	r3, #5
 8001736:	d10c      	bne.n	8001752 <HAL_RCC_OscConfig+0x356>
 8001738:	4b6d      	ldr	r3, [pc, #436]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a6c      	ldr	r2, [pc, #432]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 800173e:	f043 0304 	orr.w	r3, r3, #4
 8001742:	6213      	str	r3, [r2, #32]
 8001744:	4b6a      	ldr	r3, [pc, #424]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	4a69      	ldr	r2, [pc, #420]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6213      	str	r3, [r2, #32]
 8001750:	e00b      	b.n	800176a <HAL_RCC_OscConfig+0x36e>
 8001752:	4b67      	ldr	r3, [pc, #412]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	4a66      	ldr	r2, [pc, #408]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	6213      	str	r3, [r2, #32]
 800175e:	4b64      	ldr	r3, [pc, #400]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	4a63      	ldr	r2, [pc, #396]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001764:	f023 0304 	bic.w	r3, r3, #4
 8001768:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d015      	beq.n	800179e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001772:	f7ff f8a3 	bl	80008bc <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001778:	e00a      	b.n	8001790 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177a:	f7ff f89f 	bl	80008bc <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	f241 3288 	movw	r2, #5000	; 0x1388
 8001788:	4293      	cmp	r3, r2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e0ab      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001790:	4b57      	ldr	r3, [pc, #348]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0ee      	beq.n	800177a <HAL_RCC_OscConfig+0x37e>
 800179c:	e014      	b.n	80017c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179e:	f7ff f88d 	bl	80008bc <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a4:	e00a      	b.n	80017bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a6:	f7ff f889 	bl	80008bc <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e095      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017bc:	4b4c      	ldr	r3, [pc, #304]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1ee      	bne.n	80017a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017c8:	7dfb      	ldrb	r3, [r7, #23]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d105      	bne.n	80017da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ce:	4b48      	ldr	r3, [pc, #288]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	4a47      	ldr	r2, [pc, #284]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80017d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 8081 	beq.w	80018e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017e4:	4b42      	ldr	r3, [pc, #264]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 030c 	and.w	r3, r3, #12
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d061      	beq.n	80018b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d146      	bne.n	8001886 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f8:	4b3f      	ldr	r3, [pc, #252]	; (80018f8 <HAL_RCC_OscConfig+0x4fc>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fe:	f7ff f85d 	bl	80008bc <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001806:	f7ff f859 	bl	80008bc <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e067      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001818:	4b35      	ldr	r3, [pc, #212]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1f0      	bne.n	8001806 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800182c:	d108      	bne.n	8001840 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800182e:	4b30      	ldr	r3, [pc, #192]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	492d      	ldr	r1, [pc, #180]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001840:	4b2b      	ldr	r3, [pc, #172]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a19      	ldr	r1, [r3, #32]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	430b      	orrs	r3, r1
 8001852:	4927      	ldr	r1, [pc, #156]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001858:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <HAL_RCC_OscConfig+0x4fc>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185e:	f7ff f82d 	bl	80008bc <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001866:	f7ff f829 	bl	80008bc <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e037      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x46a>
 8001884:	e02f      	b.n	80018e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001886:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <HAL_RCC_OscConfig+0x4fc>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff f816 	bl	80008bc <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001894:	f7ff f812 	bl	80008bc <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e020      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x498>
 80018b2:	e018      	b.n	80018e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d101      	bne.n	80018c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e013      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d106      	bne.n	80018e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d001      	beq.n	80018e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40007000 	.word	0x40007000
 80018f8:	42420060 	.word	0x42420060

080018fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0d0      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001910:	4b6a      	ldr	r3, [pc, #424]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d910      	bls.n	8001940 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191e:	4b67      	ldr	r3, [pc, #412]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 0207 	bic.w	r2, r3, #7
 8001926:	4965      	ldr	r1, [pc, #404]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192e:	4b63      	ldr	r3, [pc, #396]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d001      	beq.n	8001940 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0b8      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d020      	beq.n	800198e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001958:	4b59      	ldr	r3, [pc, #356]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	4a58      	ldr	r2, [pc, #352]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001962:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001970:	4b53      	ldr	r3, [pc, #332]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	4a52      	ldr	r2, [pc, #328]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800197a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800197c:	4b50      	ldr	r3, [pc, #320]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	494d      	ldr	r1, [pc, #308]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800198a:	4313      	orrs	r3, r2
 800198c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d040      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d107      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	4b47      	ldr	r3, [pc, #284]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d115      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e07f      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d107      	bne.n	80019ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ba:	4b41      	ldr	r3, [pc, #260]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d109      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e073      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ca:	4b3d      	ldr	r3, [pc, #244]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e06b      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019da:	4b39      	ldr	r3, [pc, #228]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f023 0203 	bic.w	r2, r3, #3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4936      	ldr	r1, [pc, #216]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019ec:	f7fe ff66 	bl	80008bc <HAL_GetTick>
 80019f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f2:	e00a      	b.n	8001a0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f4:	f7fe ff62 	bl	80008bc <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e053      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 020c 	and.w	r2, r3, #12
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d1eb      	bne.n	80019f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b27      	ldr	r3, [pc, #156]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d210      	bcs.n	8001a4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b24      	ldr	r3, [pc, #144]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 0207 	bic.w	r2, r3, #7
 8001a32:	4922      	ldr	r1, [pc, #136]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b20      	ldr	r3, [pc, #128]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e032      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d008      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a58:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	4916      	ldr	r1, [pc, #88]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d009      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a76:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	490e      	ldr	r1, [pc, #56]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a8a:	f000 f821 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	091b      	lsrs	r3, r3, #4
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	490a      	ldr	r1, [pc, #40]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9c:	5ccb      	ldrb	r3, [r1, r3]
 8001a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa2:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <HAL_RCC_ClockConfig+0x1cc>)
 8001aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_RCC_ClockConfig+0x1d0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fec4 	bl	8000838 <HAL_InitTick>

  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40022000 	.word	0x40022000
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	080030c8 	.word	0x080030c8
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	20000004 	.word	0x20000004

08001ad0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad0:	b490      	push	{r4, r7}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ad8:	1d3c      	adds	r4, r7, #4
 8001ada:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001adc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ae0:	f240 2301 	movw	r3, #513	; 0x201
 8001ae4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	2300      	movs	r3, #0
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001afa:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d002      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0x40>
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d003      	beq.n	8001b16 <HAL_RCC_GetSysClockFreq+0x46>
 8001b0e:	e02d      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b10:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b12:	623b      	str	r3, [r7, #32]
      break;
 8001b14:	e02d      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	0c9b      	lsrs	r3, r3, #18
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b22:	4413      	add	r3, r2
 8001b24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b28:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d013      	beq.n	8001b5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	0c5b      	lsrs	r3, r3, #17
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b42:	4413      	add	r3, r2
 8001b44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	4a0e      	ldr	r2, [pc, #56]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b4e:	fb02 f203 	mul.w	r2, r2, r3
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
 8001b5a:	e004      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b60:	fb02 f303 	mul.w	r3, r2, r3
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	623b      	str	r3, [r7, #32]
      break;
 8001b6a:	e002      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b6e:	623b      	str	r3, [r7, #32]
      break;
 8001b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b72:	6a3b      	ldr	r3, [r7, #32]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3728      	adds	r7, #40	; 0x28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc90      	pop	{r4, r7}
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	080030b8 	.word	0x080030b8
 8001b84:	40021000 	.word	0x40021000
 8001b88:	007a1200 	.word	0x007a1200
 8001b8c:	003d0900 	.word	0x003d0900

08001b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b94:	4b02      	ldr	r3, [pc, #8]	; (8001ba0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	20000000 	.word	0x20000000

08001ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ba8:	f7ff fff2 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001bac:	4602      	mov	r2, r0
 8001bae:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	0a1b      	lsrs	r3, r3, #8
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	4903      	ldr	r1, [pc, #12]	; (8001bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bba:	5ccb      	ldrb	r3, [r1, r3]
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	080030d8 	.word	0x080030d8

08001bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bd0:	f7ff ffde 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	0adb      	lsrs	r3, r3, #11
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	4903      	ldr	r1, [pc, #12]	; (8001bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001be2:	5ccb      	ldrb	r3, [r1, r3]
 8001be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	080030d8 	.word	0x080030d8

08001bf4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <RCC_Delay+0x34>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <RCC_Delay+0x38>)
 8001c02:	fba2 2303 	umull	r2, r3, r2, r3
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	fb02 f303 	mul.w	r3, r2, r3
 8001c0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c10:	bf00      	nop
  }
  while (Delay --);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1e5a      	subs	r2, r3, #1
 8001c16:	60fa      	str	r2, [r7, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f9      	bne.n	8001c10 <RCC_Delay+0x1c>
}
 8001c1c:	bf00      	nop
 8001c1e:	bf00      	nop
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	10624dd3 	.word	0x10624dd3

08001c30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e03f      	b.n	8001cc2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d106      	bne.n	8001c5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7fe fd74 	bl	8000744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2224      	movs	r2, #36	; 0x24
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f905 	bl	8001e84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	695a      	ldr	r2, [r3, #20]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ca8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b08a      	sub	sp, #40	; 0x28
 8001cce:	af02      	add	r7, sp, #8
 8001cd0:	60f8      	str	r0, [r7, #12]
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	603b      	str	r3, [r7, #0]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b20      	cmp	r3, #32
 8001ce8:	d17c      	bne.n	8001de4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <HAL_UART_Transmit+0x2c>
 8001cf0:	88fb      	ldrh	r3, [r7, #6]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e075      	b.n	8001de6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <HAL_UART_Transmit+0x3e>
 8001d04:	2302      	movs	r3, #2
 8001d06:	e06e      	b.n	8001de6 <HAL_UART_Transmit+0x11c>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2221      	movs	r2, #33	; 0x21
 8001d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d1e:	f7fe fdcd 	bl	80008bc <HAL_GetTick>
 8001d22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	88fa      	ldrh	r2, [r7, #6]
 8001d28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	88fa      	ldrh	r2, [r7, #6]
 8001d2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d38:	d108      	bne.n	8001d4c <HAL_UART_Transmit+0x82>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d104      	bne.n	8001d4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	61bb      	str	r3, [r7, #24]
 8001d4a:	e003      	b.n	8001d54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001d5c:	e02a      	b.n	8001db4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2200      	movs	r2, #0
 8001d66:	2180      	movs	r1, #128	; 0x80
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 f840 	bl	8001dee <UART_WaitOnFlagUntilTimeout>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e036      	b.n	8001de6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10b      	bne.n	8001d96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	3302      	adds	r3, #2
 8001d92:	61bb      	str	r3, [r7, #24]
 8001d94:	e007      	b.n	8001da6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	781a      	ldrb	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	3301      	adds	r3, #1
 8001da4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	3b01      	subs	r3, #1
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1cf      	bne.n	8001d5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2140      	movs	r1, #64	; 0x40
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 f810 	bl	8001dee <UART_WaitOnFlagUntilTimeout>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e006      	b.n	8001de6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	e000      	b.n	8001de6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001de4:	2302      	movs	r3, #2
  }
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b084      	sub	sp, #16
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dfe:	e02c      	b.n	8001e5a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e06:	d028      	beq.n	8001e5a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d007      	beq.n	8001e1e <UART_WaitOnFlagUntilTimeout+0x30>
 8001e0e:	f7fe fd55 	bl	80008bc <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d21d      	bcs.n	8001e5a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e2c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	695a      	ldr	r2, [r3, #20]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0201 	bic.w	r2, r2, #1
 8001e3c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2220      	movs	r2, #32
 8001e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2220      	movs	r2, #32
 8001e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e00f      	b.n	8001e7a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	4013      	ands	r3, r2
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	bf0c      	ite	eq
 8001e6a:	2301      	moveq	r3, #1
 8001e6c:	2300      	movne	r3, #0
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	461a      	mov	r2, r3
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d0c3      	beq.n	8001e00 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001ebe:	f023 030c 	bic.w	r3, r3, #12
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	68b9      	ldr	r1, [r7, #8]
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699a      	ldr	r2, [r3, #24]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a2c      	ldr	r2, [pc, #176]	; (8001f98 <UART_SetConfig+0x114>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d103      	bne.n	8001ef4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001eec:	f7ff fe6e 	bl	8001bcc <HAL_RCC_GetPCLK2Freq>
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	e002      	b.n	8001efa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ef4:	f7ff fe56 	bl	8001ba4 <HAL_RCC_GetPCLK1Freq>
 8001ef8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	009a      	lsls	r2, r3, #2
 8001f04:	441a      	add	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f10:	4a22      	ldr	r2, [pc, #136]	; (8001f9c <UART_SetConfig+0x118>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	0119      	lsls	r1, r3, #4
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	009a      	lsls	r2, r3, #2
 8001f24:	441a      	add	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <UART_SetConfig+0x118>)
 8001f32:	fba3 0302 	umull	r0, r3, r3, r2
 8001f36:	095b      	lsrs	r3, r3, #5
 8001f38:	2064      	movs	r0, #100	; 0x64
 8001f3a:	fb00 f303 	mul.w	r3, r0, r3
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	3332      	adds	r3, #50	; 0x32
 8001f44:	4a15      	ldr	r2, [pc, #84]	; (8001f9c <UART_SetConfig+0x118>)
 8001f46:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f50:	4419      	add	r1, r3
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	009a      	lsls	r2, r3, #2
 8001f5c:	441a      	add	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <UART_SetConfig+0x118>)
 8001f6a:	fba3 0302 	umull	r0, r3, r3, r2
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	2064      	movs	r0, #100	; 0x64
 8001f72:	fb00 f303 	mul.w	r3, r0, r3
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	3332      	adds	r3, #50	; 0x32
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <UART_SetConfig+0x118>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	f003 020f 	and.w	r2, r3, #15
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	440a      	add	r2, r1
 8001f8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40013800 	.word	0x40013800
 8001f9c:	51eb851f 	.word	0x51eb851f

08001fa0 <__errno>:
 8001fa0:	4b01      	ldr	r3, [pc, #4]	; (8001fa8 <__errno+0x8>)
 8001fa2:	6818      	ldr	r0, [r3, #0]
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	2000000c 	.word	0x2000000c

08001fac <__libc_init_array>:
 8001fac:	b570      	push	{r4, r5, r6, lr}
 8001fae:	2600      	movs	r6, #0
 8001fb0:	4d0c      	ldr	r5, [pc, #48]	; (8001fe4 <__libc_init_array+0x38>)
 8001fb2:	4c0d      	ldr	r4, [pc, #52]	; (8001fe8 <__libc_init_array+0x3c>)
 8001fb4:	1b64      	subs	r4, r4, r5
 8001fb6:	10a4      	asrs	r4, r4, #2
 8001fb8:	42a6      	cmp	r6, r4
 8001fba:	d109      	bne.n	8001fd0 <__libc_init_array+0x24>
 8001fbc:	f001 f854 	bl	8003068 <_init>
 8001fc0:	2600      	movs	r6, #0
 8001fc2:	4d0a      	ldr	r5, [pc, #40]	; (8001fec <__libc_init_array+0x40>)
 8001fc4:	4c0a      	ldr	r4, [pc, #40]	; (8001ff0 <__libc_init_array+0x44>)
 8001fc6:	1b64      	subs	r4, r4, r5
 8001fc8:	10a4      	asrs	r4, r4, #2
 8001fca:	42a6      	cmp	r6, r4
 8001fcc:	d105      	bne.n	8001fda <__libc_init_array+0x2e>
 8001fce:	bd70      	pop	{r4, r5, r6, pc}
 8001fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fd4:	4798      	blx	r3
 8001fd6:	3601      	adds	r6, #1
 8001fd8:	e7ee      	b.n	8001fb8 <__libc_init_array+0xc>
 8001fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fde:	4798      	blx	r3
 8001fe0:	3601      	adds	r6, #1
 8001fe2:	e7f2      	b.n	8001fca <__libc_init_array+0x1e>
 8001fe4:	08003178 	.word	0x08003178
 8001fe8:	08003178 	.word	0x08003178
 8001fec:	08003178 	.word	0x08003178
 8001ff0:	0800317c 	.word	0x0800317c

08001ff4 <memset>:
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	4402      	add	r2, r0
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d100      	bne.n	8001ffe <memset+0xa>
 8001ffc:	4770      	bx	lr
 8001ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8002002:	e7f9      	b.n	8001ff8 <memset+0x4>

08002004 <iprintf>:
 8002004:	b40f      	push	{r0, r1, r2, r3}
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <iprintf+0x2c>)
 8002008:	b513      	push	{r0, r1, r4, lr}
 800200a:	681c      	ldr	r4, [r3, #0]
 800200c:	b124      	cbz	r4, 8002018 <iprintf+0x14>
 800200e:	69a3      	ldr	r3, [r4, #24]
 8002010:	b913      	cbnz	r3, 8002018 <iprintf+0x14>
 8002012:	4620      	mov	r0, r4
 8002014:	f000 fa72 	bl	80024fc <__sinit>
 8002018:	ab05      	add	r3, sp, #20
 800201a:	4620      	mov	r0, r4
 800201c:	9a04      	ldr	r2, [sp, #16]
 800201e:	68a1      	ldr	r1, [r4, #8]
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	f000 fc3d 	bl	80028a0 <_vfiprintf_r>
 8002026:	b002      	add	sp, #8
 8002028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800202c:	b004      	add	sp, #16
 800202e:	4770      	bx	lr
 8002030:	2000000c 	.word	0x2000000c

08002034 <putchar>:
 8002034:	b538      	push	{r3, r4, r5, lr}
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <putchar+0x24>)
 8002038:	4605      	mov	r5, r0
 800203a:	681c      	ldr	r4, [r3, #0]
 800203c:	b124      	cbz	r4, 8002048 <putchar+0x14>
 800203e:	69a3      	ldr	r3, [r4, #24]
 8002040:	b913      	cbnz	r3, 8002048 <putchar+0x14>
 8002042:	4620      	mov	r0, r4
 8002044:	f000 fa5a 	bl	80024fc <__sinit>
 8002048:	4629      	mov	r1, r5
 800204a:	4620      	mov	r0, r4
 800204c:	68a2      	ldr	r2, [r4, #8]
 800204e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002052:	f000 beeb 	b.w	8002e2c <_putc_r>
 8002056:	bf00      	nop
 8002058:	2000000c 	.word	0x2000000c

0800205c <_puts_r>:
 800205c:	b570      	push	{r4, r5, r6, lr}
 800205e:	460e      	mov	r6, r1
 8002060:	4605      	mov	r5, r0
 8002062:	b118      	cbz	r0, 800206c <_puts_r+0x10>
 8002064:	6983      	ldr	r3, [r0, #24]
 8002066:	b90b      	cbnz	r3, 800206c <_puts_r+0x10>
 8002068:	f000 fa48 	bl	80024fc <__sinit>
 800206c:	69ab      	ldr	r3, [r5, #24]
 800206e:	68ac      	ldr	r4, [r5, #8]
 8002070:	b913      	cbnz	r3, 8002078 <_puts_r+0x1c>
 8002072:	4628      	mov	r0, r5
 8002074:	f000 fa42 	bl	80024fc <__sinit>
 8002078:	4b2c      	ldr	r3, [pc, #176]	; (800212c <_puts_r+0xd0>)
 800207a:	429c      	cmp	r4, r3
 800207c:	d120      	bne.n	80020c0 <_puts_r+0x64>
 800207e:	686c      	ldr	r4, [r5, #4]
 8002080:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002082:	07db      	lsls	r3, r3, #31
 8002084:	d405      	bmi.n	8002092 <_puts_r+0x36>
 8002086:	89a3      	ldrh	r3, [r4, #12]
 8002088:	0598      	lsls	r0, r3, #22
 800208a:	d402      	bmi.n	8002092 <_puts_r+0x36>
 800208c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800208e:	f000 fad3 	bl	8002638 <__retarget_lock_acquire_recursive>
 8002092:	89a3      	ldrh	r3, [r4, #12]
 8002094:	0719      	lsls	r1, r3, #28
 8002096:	d51d      	bpl.n	80020d4 <_puts_r+0x78>
 8002098:	6923      	ldr	r3, [r4, #16]
 800209a:	b1db      	cbz	r3, 80020d4 <_puts_r+0x78>
 800209c:	3e01      	subs	r6, #1
 800209e:	68a3      	ldr	r3, [r4, #8]
 80020a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80020a4:	3b01      	subs	r3, #1
 80020a6:	60a3      	str	r3, [r4, #8]
 80020a8:	bb39      	cbnz	r1, 80020fa <_puts_r+0x9e>
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	da38      	bge.n	8002120 <_puts_r+0xc4>
 80020ae:	4622      	mov	r2, r4
 80020b0:	210a      	movs	r1, #10
 80020b2:	4628      	mov	r0, r5
 80020b4:	f000 f848 	bl	8002148 <__swbuf_r>
 80020b8:	3001      	adds	r0, #1
 80020ba:	d011      	beq.n	80020e0 <_puts_r+0x84>
 80020bc:	250a      	movs	r5, #10
 80020be:	e011      	b.n	80020e4 <_puts_r+0x88>
 80020c0:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <_puts_r+0xd4>)
 80020c2:	429c      	cmp	r4, r3
 80020c4:	d101      	bne.n	80020ca <_puts_r+0x6e>
 80020c6:	68ac      	ldr	r4, [r5, #8]
 80020c8:	e7da      	b.n	8002080 <_puts_r+0x24>
 80020ca:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <_puts_r+0xd8>)
 80020cc:	429c      	cmp	r4, r3
 80020ce:	bf08      	it	eq
 80020d0:	68ec      	ldreq	r4, [r5, #12]
 80020d2:	e7d5      	b.n	8002080 <_puts_r+0x24>
 80020d4:	4621      	mov	r1, r4
 80020d6:	4628      	mov	r0, r5
 80020d8:	f000 f888 	bl	80021ec <__swsetup_r>
 80020dc:	2800      	cmp	r0, #0
 80020de:	d0dd      	beq.n	800209c <_puts_r+0x40>
 80020e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80020e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020e6:	07da      	lsls	r2, r3, #31
 80020e8:	d405      	bmi.n	80020f6 <_puts_r+0x9a>
 80020ea:	89a3      	ldrh	r3, [r4, #12]
 80020ec:	059b      	lsls	r3, r3, #22
 80020ee:	d402      	bmi.n	80020f6 <_puts_r+0x9a>
 80020f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020f2:	f000 faa2 	bl	800263a <__retarget_lock_release_recursive>
 80020f6:	4628      	mov	r0, r5
 80020f8:	bd70      	pop	{r4, r5, r6, pc}
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	da04      	bge.n	8002108 <_puts_r+0xac>
 80020fe:	69a2      	ldr	r2, [r4, #24]
 8002100:	429a      	cmp	r2, r3
 8002102:	dc06      	bgt.n	8002112 <_puts_r+0xb6>
 8002104:	290a      	cmp	r1, #10
 8002106:	d004      	beq.n	8002112 <_puts_r+0xb6>
 8002108:	6823      	ldr	r3, [r4, #0]
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	6022      	str	r2, [r4, #0]
 800210e:	7019      	strb	r1, [r3, #0]
 8002110:	e7c5      	b.n	800209e <_puts_r+0x42>
 8002112:	4622      	mov	r2, r4
 8002114:	4628      	mov	r0, r5
 8002116:	f000 f817 	bl	8002148 <__swbuf_r>
 800211a:	3001      	adds	r0, #1
 800211c:	d1bf      	bne.n	800209e <_puts_r+0x42>
 800211e:	e7df      	b.n	80020e0 <_puts_r+0x84>
 8002120:	250a      	movs	r5, #10
 8002122:	6823      	ldr	r3, [r4, #0]
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	6022      	str	r2, [r4, #0]
 8002128:	701d      	strb	r5, [r3, #0]
 800212a:	e7db      	b.n	80020e4 <_puts_r+0x88>
 800212c:	08003104 	.word	0x08003104
 8002130:	08003124 	.word	0x08003124
 8002134:	080030e4 	.word	0x080030e4

08002138 <puts>:
 8002138:	4b02      	ldr	r3, [pc, #8]	; (8002144 <puts+0xc>)
 800213a:	4601      	mov	r1, r0
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	f7ff bf8d 	b.w	800205c <_puts_r>
 8002142:	bf00      	nop
 8002144:	2000000c 	.word	0x2000000c

08002148 <__swbuf_r>:
 8002148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800214a:	460e      	mov	r6, r1
 800214c:	4614      	mov	r4, r2
 800214e:	4605      	mov	r5, r0
 8002150:	b118      	cbz	r0, 800215a <__swbuf_r+0x12>
 8002152:	6983      	ldr	r3, [r0, #24]
 8002154:	b90b      	cbnz	r3, 800215a <__swbuf_r+0x12>
 8002156:	f000 f9d1 	bl	80024fc <__sinit>
 800215a:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <__swbuf_r+0x98>)
 800215c:	429c      	cmp	r4, r3
 800215e:	d12b      	bne.n	80021b8 <__swbuf_r+0x70>
 8002160:	686c      	ldr	r4, [r5, #4]
 8002162:	69a3      	ldr	r3, [r4, #24]
 8002164:	60a3      	str	r3, [r4, #8]
 8002166:	89a3      	ldrh	r3, [r4, #12]
 8002168:	071a      	lsls	r2, r3, #28
 800216a:	d52f      	bpl.n	80021cc <__swbuf_r+0x84>
 800216c:	6923      	ldr	r3, [r4, #16]
 800216e:	b36b      	cbz	r3, 80021cc <__swbuf_r+0x84>
 8002170:	6923      	ldr	r3, [r4, #16]
 8002172:	6820      	ldr	r0, [r4, #0]
 8002174:	b2f6      	uxtb	r6, r6
 8002176:	1ac0      	subs	r0, r0, r3
 8002178:	6963      	ldr	r3, [r4, #20]
 800217a:	4637      	mov	r7, r6
 800217c:	4283      	cmp	r3, r0
 800217e:	dc04      	bgt.n	800218a <__swbuf_r+0x42>
 8002180:	4621      	mov	r1, r4
 8002182:	4628      	mov	r0, r5
 8002184:	f000 f926 	bl	80023d4 <_fflush_r>
 8002188:	bb30      	cbnz	r0, 80021d8 <__swbuf_r+0x90>
 800218a:	68a3      	ldr	r3, [r4, #8]
 800218c:	3001      	adds	r0, #1
 800218e:	3b01      	subs	r3, #1
 8002190:	60a3      	str	r3, [r4, #8]
 8002192:	6823      	ldr	r3, [r4, #0]
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	6022      	str	r2, [r4, #0]
 8002198:	701e      	strb	r6, [r3, #0]
 800219a:	6963      	ldr	r3, [r4, #20]
 800219c:	4283      	cmp	r3, r0
 800219e:	d004      	beq.n	80021aa <__swbuf_r+0x62>
 80021a0:	89a3      	ldrh	r3, [r4, #12]
 80021a2:	07db      	lsls	r3, r3, #31
 80021a4:	d506      	bpl.n	80021b4 <__swbuf_r+0x6c>
 80021a6:	2e0a      	cmp	r6, #10
 80021a8:	d104      	bne.n	80021b4 <__swbuf_r+0x6c>
 80021aa:	4621      	mov	r1, r4
 80021ac:	4628      	mov	r0, r5
 80021ae:	f000 f911 	bl	80023d4 <_fflush_r>
 80021b2:	b988      	cbnz	r0, 80021d8 <__swbuf_r+0x90>
 80021b4:	4638      	mov	r0, r7
 80021b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021b8:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <__swbuf_r+0x9c>)
 80021ba:	429c      	cmp	r4, r3
 80021bc:	d101      	bne.n	80021c2 <__swbuf_r+0x7a>
 80021be:	68ac      	ldr	r4, [r5, #8]
 80021c0:	e7cf      	b.n	8002162 <__swbuf_r+0x1a>
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <__swbuf_r+0xa0>)
 80021c4:	429c      	cmp	r4, r3
 80021c6:	bf08      	it	eq
 80021c8:	68ec      	ldreq	r4, [r5, #12]
 80021ca:	e7ca      	b.n	8002162 <__swbuf_r+0x1a>
 80021cc:	4621      	mov	r1, r4
 80021ce:	4628      	mov	r0, r5
 80021d0:	f000 f80c 	bl	80021ec <__swsetup_r>
 80021d4:	2800      	cmp	r0, #0
 80021d6:	d0cb      	beq.n	8002170 <__swbuf_r+0x28>
 80021d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80021dc:	e7ea      	b.n	80021b4 <__swbuf_r+0x6c>
 80021de:	bf00      	nop
 80021e0:	08003104 	.word	0x08003104
 80021e4:	08003124 	.word	0x08003124
 80021e8:	080030e4 	.word	0x080030e4

080021ec <__swsetup_r>:
 80021ec:	4b32      	ldr	r3, [pc, #200]	; (80022b8 <__swsetup_r+0xcc>)
 80021ee:	b570      	push	{r4, r5, r6, lr}
 80021f0:	681d      	ldr	r5, [r3, #0]
 80021f2:	4606      	mov	r6, r0
 80021f4:	460c      	mov	r4, r1
 80021f6:	b125      	cbz	r5, 8002202 <__swsetup_r+0x16>
 80021f8:	69ab      	ldr	r3, [r5, #24]
 80021fa:	b913      	cbnz	r3, 8002202 <__swsetup_r+0x16>
 80021fc:	4628      	mov	r0, r5
 80021fe:	f000 f97d 	bl	80024fc <__sinit>
 8002202:	4b2e      	ldr	r3, [pc, #184]	; (80022bc <__swsetup_r+0xd0>)
 8002204:	429c      	cmp	r4, r3
 8002206:	d10f      	bne.n	8002228 <__swsetup_r+0x3c>
 8002208:	686c      	ldr	r4, [r5, #4]
 800220a:	89a3      	ldrh	r3, [r4, #12]
 800220c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002210:	0719      	lsls	r1, r3, #28
 8002212:	d42c      	bmi.n	800226e <__swsetup_r+0x82>
 8002214:	06dd      	lsls	r5, r3, #27
 8002216:	d411      	bmi.n	800223c <__swsetup_r+0x50>
 8002218:	2309      	movs	r3, #9
 800221a:	6033      	str	r3, [r6, #0]
 800221c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002224:	81a3      	strh	r3, [r4, #12]
 8002226:	e03e      	b.n	80022a6 <__swsetup_r+0xba>
 8002228:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <__swsetup_r+0xd4>)
 800222a:	429c      	cmp	r4, r3
 800222c:	d101      	bne.n	8002232 <__swsetup_r+0x46>
 800222e:	68ac      	ldr	r4, [r5, #8]
 8002230:	e7eb      	b.n	800220a <__swsetup_r+0x1e>
 8002232:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <__swsetup_r+0xd8>)
 8002234:	429c      	cmp	r4, r3
 8002236:	bf08      	it	eq
 8002238:	68ec      	ldreq	r4, [r5, #12]
 800223a:	e7e6      	b.n	800220a <__swsetup_r+0x1e>
 800223c:	0758      	lsls	r0, r3, #29
 800223e:	d512      	bpl.n	8002266 <__swsetup_r+0x7a>
 8002240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002242:	b141      	cbz	r1, 8002256 <__swsetup_r+0x6a>
 8002244:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002248:	4299      	cmp	r1, r3
 800224a:	d002      	beq.n	8002252 <__swsetup_r+0x66>
 800224c:	4630      	mov	r0, r6
 800224e:	f000 fa59 	bl	8002704 <_free_r>
 8002252:	2300      	movs	r3, #0
 8002254:	6363      	str	r3, [r4, #52]	; 0x34
 8002256:	89a3      	ldrh	r3, [r4, #12]
 8002258:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800225c:	81a3      	strh	r3, [r4, #12]
 800225e:	2300      	movs	r3, #0
 8002260:	6063      	str	r3, [r4, #4]
 8002262:	6923      	ldr	r3, [r4, #16]
 8002264:	6023      	str	r3, [r4, #0]
 8002266:	89a3      	ldrh	r3, [r4, #12]
 8002268:	f043 0308 	orr.w	r3, r3, #8
 800226c:	81a3      	strh	r3, [r4, #12]
 800226e:	6923      	ldr	r3, [r4, #16]
 8002270:	b94b      	cbnz	r3, 8002286 <__swsetup_r+0x9a>
 8002272:	89a3      	ldrh	r3, [r4, #12]
 8002274:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800227c:	d003      	beq.n	8002286 <__swsetup_r+0x9a>
 800227e:	4621      	mov	r1, r4
 8002280:	4630      	mov	r0, r6
 8002282:	f000 f9ff 	bl	8002684 <__smakebuf_r>
 8002286:	89a0      	ldrh	r0, [r4, #12]
 8002288:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800228c:	f010 0301 	ands.w	r3, r0, #1
 8002290:	d00a      	beq.n	80022a8 <__swsetup_r+0xbc>
 8002292:	2300      	movs	r3, #0
 8002294:	60a3      	str	r3, [r4, #8]
 8002296:	6963      	ldr	r3, [r4, #20]
 8002298:	425b      	negs	r3, r3
 800229a:	61a3      	str	r3, [r4, #24]
 800229c:	6923      	ldr	r3, [r4, #16]
 800229e:	b943      	cbnz	r3, 80022b2 <__swsetup_r+0xc6>
 80022a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80022a4:	d1ba      	bne.n	800221c <__swsetup_r+0x30>
 80022a6:	bd70      	pop	{r4, r5, r6, pc}
 80022a8:	0781      	lsls	r1, r0, #30
 80022aa:	bf58      	it	pl
 80022ac:	6963      	ldrpl	r3, [r4, #20]
 80022ae:	60a3      	str	r3, [r4, #8]
 80022b0:	e7f4      	b.n	800229c <__swsetup_r+0xb0>
 80022b2:	2000      	movs	r0, #0
 80022b4:	e7f7      	b.n	80022a6 <__swsetup_r+0xba>
 80022b6:	bf00      	nop
 80022b8:	2000000c 	.word	0x2000000c
 80022bc:	08003104 	.word	0x08003104
 80022c0:	08003124 	.word	0x08003124
 80022c4:	080030e4 	.word	0x080030e4

080022c8 <__sflush_r>:
 80022c8:	898a      	ldrh	r2, [r1, #12]
 80022ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022ce:	4605      	mov	r5, r0
 80022d0:	0710      	lsls	r0, r2, #28
 80022d2:	460c      	mov	r4, r1
 80022d4:	d458      	bmi.n	8002388 <__sflush_r+0xc0>
 80022d6:	684b      	ldr	r3, [r1, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	dc05      	bgt.n	80022e8 <__sflush_r+0x20>
 80022dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	dc02      	bgt.n	80022e8 <__sflush_r+0x20>
 80022e2:	2000      	movs	r0, #0
 80022e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80022ea:	2e00      	cmp	r6, #0
 80022ec:	d0f9      	beq.n	80022e2 <__sflush_r+0x1a>
 80022ee:	2300      	movs	r3, #0
 80022f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80022f4:	682f      	ldr	r7, [r5, #0]
 80022f6:	602b      	str	r3, [r5, #0]
 80022f8:	d032      	beq.n	8002360 <__sflush_r+0x98>
 80022fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80022fc:	89a3      	ldrh	r3, [r4, #12]
 80022fe:	075a      	lsls	r2, r3, #29
 8002300:	d505      	bpl.n	800230e <__sflush_r+0x46>
 8002302:	6863      	ldr	r3, [r4, #4]
 8002304:	1ac0      	subs	r0, r0, r3
 8002306:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002308:	b10b      	cbz	r3, 800230e <__sflush_r+0x46>
 800230a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800230c:	1ac0      	subs	r0, r0, r3
 800230e:	2300      	movs	r3, #0
 8002310:	4602      	mov	r2, r0
 8002312:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002314:	4628      	mov	r0, r5
 8002316:	6a21      	ldr	r1, [r4, #32]
 8002318:	47b0      	blx	r6
 800231a:	1c43      	adds	r3, r0, #1
 800231c:	89a3      	ldrh	r3, [r4, #12]
 800231e:	d106      	bne.n	800232e <__sflush_r+0x66>
 8002320:	6829      	ldr	r1, [r5, #0]
 8002322:	291d      	cmp	r1, #29
 8002324:	d82c      	bhi.n	8002380 <__sflush_r+0xb8>
 8002326:	4a2a      	ldr	r2, [pc, #168]	; (80023d0 <__sflush_r+0x108>)
 8002328:	40ca      	lsrs	r2, r1
 800232a:	07d6      	lsls	r6, r2, #31
 800232c:	d528      	bpl.n	8002380 <__sflush_r+0xb8>
 800232e:	2200      	movs	r2, #0
 8002330:	6062      	str	r2, [r4, #4]
 8002332:	6922      	ldr	r2, [r4, #16]
 8002334:	04d9      	lsls	r1, r3, #19
 8002336:	6022      	str	r2, [r4, #0]
 8002338:	d504      	bpl.n	8002344 <__sflush_r+0x7c>
 800233a:	1c42      	adds	r2, r0, #1
 800233c:	d101      	bne.n	8002342 <__sflush_r+0x7a>
 800233e:	682b      	ldr	r3, [r5, #0]
 8002340:	b903      	cbnz	r3, 8002344 <__sflush_r+0x7c>
 8002342:	6560      	str	r0, [r4, #84]	; 0x54
 8002344:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002346:	602f      	str	r7, [r5, #0]
 8002348:	2900      	cmp	r1, #0
 800234a:	d0ca      	beq.n	80022e2 <__sflush_r+0x1a>
 800234c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002350:	4299      	cmp	r1, r3
 8002352:	d002      	beq.n	800235a <__sflush_r+0x92>
 8002354:	4628      	mov	r0, r5
 8002356:	f000 f9d5 	bl	8002704 <_free_r>
 800235a:	2000      	movs	r0, #0
 800235c:	6360      	str	r0, [r4, #52]	; 0x34
 800235e:	e7c1      	b.n	80022e4 <__sflush_r+0x1c>
 8002360:	6a21      	ldr	r1, [r4, #32]
 8002362:	2301      	movs	r3, #1
 8002364:	4628      	mov	r0, r5
 8002366:	47b0      	blx	r6
 8002368:	1c41      	adds	r1, r0, #1
 800236a:	d1c7      	bne.n	80022fc <__sflush_r+0x34>
 800236c:	682b      	ldr	r3, [r5, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0c4      	beq.n	80022fc <__sflush_r+0x34>
 8002372:	2b1d      	cmp	r3, #29
 8002374:	d001      	beq.n	800237a <__sflush_r+0xb2>
 8002376:	2b16      	cmp	r3, #22
 8002378:	d101      	bne.n	800237e <__sflush_r+0xb6>
 800237a:	602f      	str	r7, [r5, #0]
 800237c:	e7b1      	b.n	80022e2 <__sflush_r+0x1a>
 800237e:	89a3      	ldrh	r3, [r4, #12]
 8002380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002384:	81a3      	strh	r3, [r4, #12]
 8002386:	e7ad      	b.n	80022e4 <__sflush_r+0x1c>
 8002388:	690f      	ldr	r7, [r1, #16]
 800238a:	2f00      	cmp	r7, #0
 800238c:	d0a9      	beq.n	80022e2 <__sflush_r+0x1a>
 800238e:	0793      	lsls	r3, r2, #30
 8002390:	bf18      	it	ne
 8002392:	2300      	movne	r3, #0
 8002394:	680e      	ldr	r6, [r1, #0]
 8002396:	bf08      	it	eq
 8002398:	694b      	ldreq	r3, [r1, #20]
 800239a:	eba6 0807 	sub.w	r8, r6, r7
 800239e:	600f      	str	r7, [r1, #0]
 80023a0:	608b      	str	r3, [r1, #8]
 80023a2:	f1b8 0f00 	cmp.w	r8, #0
 80023a6:	dd9c      	ble.n	80022e2 <__sflush_r+0x1a>
 80023a8:	4643      	mov	r3, r8
 80023aa:	463a      	mov	r2, r7
 80023ac:	4628      	mov	r0, r5
 80023ae:	6a21      	ldr	r1, [r4, #32]
 80023b0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80023b2:	47b0      	blx	r6
 80023b4:	2800      	cmp	r0, #0
 80023b6:	dc06      	bgt.n	80023c6 <__sflush_r+0xfe>
 80023b8:	89a3      	ldrh	r3, [r4, #12]
 80023ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023c2:	81a3      	strh	r3, [r4, #12]
 80023c4:	e78e      	b.n	80022e4 <__sflush_r+0x1c>
 80023c6:	4407      	add	r7, r0
 80023c8:	eba8 0800 	sub.w	r8, r8, r0
 80023cc:	e7e9      	b.n	80023a2 <__sflush_r+0xda>
 80023ce:	bf00      	nop
 80023d0:	20400001 	.word	0x20400001

080023d4 <_fflush_r>:
 80023d4:	b538      	push	{r3, r4, r5, lr}
 80023d6:	690b      	ldr	r3, [r1, #16]
 80023d8:	4605      	mov	r5, r0
 80023da:	460c      	mov	r4, r1
 80023dc:	b913      	cbnz	r3, 80023e4 <_fflush_r+0x10>
 80023de:	2500      	movs	r5, #0
 80023e0:	4628      	mov	r0, r5
 80023e2:	bd38      	pop	{r3, r4, r5, pc}
 80023e4:	b118      	cbz	r0, 80023ee <_fflush_r+0x1a>
 80023e6:	6983      	ldr	r3, [r0, #24]
 80023e8:	b90b      	cbnz	r3, 80023ee <_fflush_r+0x1a>
 80023ea:	f000 f887 	bl	80024fc <__sinit>
 80023ee:	4b14      	ldr	r3, [pc, #80]	; (8002440 <_fflush_r+0x6c>)
 80023f0:	429c      	cmp	r4, r3
 80023f2:	d11b      	bne.n	800242c <_fflush_r+0x58>
 80023f4:	686c      	ldr	r4, [r5, #4]
 80023f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0ef      	beq.n	80023de <_fflush_r+0xa>
 80023fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002400:	07d0      	lsls	r0, r2, #31
 8002402:	d404      	bmi.n	800240e <_fflush_r+0x3a>
 8002404:	0599      	lsls	r1, r3, #22
 8002406:	d402      	bmi.n	800240e <_fflush_r+0x3a>
 8002408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800240a:	f000 f915 	bl	8002638 <__retarget_lock_acquire_recursive>
 800240e:	4628      	mov	r0, r5
 8002410:	4621      	mov	r1, r4
 8002412:	f7ff ff59 	bl	80022c8 <__sflush_r>
 8002416:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002418:	4605      	mov	r5, r0
 800241a:	07da      	lsls	r2, r3, #31
 800241c:	d4e0      	bmi.n	80023e0 <_fflush_r+0xc>
 800241e:	89a3      	ldrh	r3, [r4, #12]
 8002420:	059b      	lsls	r3, r3, #22
 8002422:	d4dd      	bmi.n	80023e0 <_fflush_r+0xc>
 8002424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002426:	f000 f908 	bl	800263a <__retarget_lock_release_recursive>
 800242a:	e7d9      	b.n	80023e0 <_fflush_r+0xc>
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <_fflush_r+0x70>)
 800242e:	429c      	cmp	r4, r3
 8002430:	d101      	bne.n	8002436 <_fflush_r+0x62>
 8002432:	68ac      	ldr	r4, [r5, #8]
 8002434:	e7df      	b.n	80023f6 <_fflush_r+0x22>
 8002436:	4b04      	ldr	r3, [pc, #16]	; (8002448 <_fflush_r+0x74>)
 8002438:	429c      	cmp	r4, r3
 800243a:	bf08      	it	eq
 800243c:	68ec      	ldreq	r4, [r5, #12]
 800243e:	e7da      	b.n	80023f6 <_fflush_r+0x22>
 8002440:	08003104 	.word	0x08003104
 8002444:	08003124 	.word	0x08003124
 8002448:	080030e4 	.word	0x080030e4

0800244c <std>:
 800244c:	2300      	movs	r3, #0
 800244e:	b510      	push	{r4, lr}
 8002450:	4604      	mov	r4, r0
 8002452:	e9c0 3300 	strd	r3, r3, [r0]
 8002456:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800245a:	6083      	str	r3, [r0, #8]
 800245c:	8181      	strh	r1, [r0, #12]
 800245e:	6643      	str	r3, [r0, #100]	; 0x64
 8002460:	81c2      	strh	r2, [r0, #14]
 8002462:	6183      	str	r3, [r0, #24]
 8002464:	4619      	mov	r1, r3
 8002466:	2208      	movs	r2, #8
 8002468:	305c      	adds	r0, #92	; 0x5c
 800246a:	f7ff fdc3 	bl	8001ff4 <memset>
 800246e:	4b05      	ldr	r3, [pc, #20]	; (8002484 <std+0x38>)
 8002470:	6224      	str	r4, [r4, #32]
 8002472:	6263      	str	r3, [r4, #36]	; 0x24
 8002474:	4b04      	ldr	r3, [pc, #16]	; (8002488 <std+0x3c>)
 8002476:	62a3      	str	r3, [r4, #40]	; 0x28
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <std+0x40>)
 800247a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800247c:	4b04      	ldr	r3, [pc, #16]	; (8002490 <std+0x44>)
 800247e:	6323      	str	r3, [r4, #48]	; 0x30
 8002480:	bd10      	pop	{r4, pc}
 8002482:	bf00      	nop
 8002484:	08002edd 	.word	0x08002edd
 8002488:	08002eff 	.word	0x08002eff
 800248c:	08002f37 	.word	0x08002f37
 8002490:	08002f5b 	.word	0x08002f5b

08002494 <_cleanup_r>:
 8002494:	4901      	ldr	r1, [pc, #4]	; (800249c <_cleanup_r+0x8>)
 8002496:	f000 b8af 	b.w	80025f8 <_fwalk_reent>
 800249a:	bf00      	nop
 800249c:	080023d5 	.word	0x080023d5

080024a0 <__sfmoreglue>:
 80024a0:	b570      	push	{r4, r5, r6, lr}
 80024a2:	2568      	movs	r5, #104	; 0x68
 80024a4:	1e4a      	subs	r2, r1, #1
 80024a6:	4355      	muls	r5, r2
 80024a8:	460e      	mov	r6, r1
 80024aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80024ae:	f000 f975 	bl	800279c <_malloc_r>
 80024b2:	4604      	mov	r4, r0
 80024b4:	b140      	cbz	r0, 80024c8 <__sfmoreglue+0x28>
 80024b6:	2100      	movs	r1, #0
 80024b8:	e9c0 1600 	strd	r1, r6, [r0]
 80024bc:	300c      	adds	r0, #12
 80024be:	60a0      	str	r0, [r4, #8]
 80024c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80024c4:	f7ff fd96 	bl	8001ff4 <memset>
 80024c8:	4620      	mov	r0, r4
 80024ca:	bd70      	pop	{r4, r5, r6, pc}

080024cc <__sfp_lock_acquire>:
 80024cc:	4801      	ldr	r0, [pc, #4]	; (80024d4 <__sfp_lock_acquire+0x8>)
 80024ce:	f000 b8b3 	b.w	8002638 <__retarget_lock_acquire_recursive>
 80024d2:	bf00      	nop
 80024d4:	2000013c 	.word	0x2000013c

080024d8 <__sfp_lock_release>:
 80024d8:	4801      	ldr	r0, [pc, #4]	; (80024e0 <__sfp_lock_release+0x8>)
 80024da:	f000 b8ae 	b.w	800263a <__retarget_lock_release_recursive>
 80024de:	bf00      	nop
 80024e0:	2000013c 	.word	0x2000013c

080024e4 <__sinit_lock_acquire>:
 80024e4:	4801      	ldr	r0, [pc, #4]	; (80024ec <__sinit_lock_acquire+0x8>)
 80024e6:	f000 b8a7 	b.w	8002638 <__retarget_lock_acquire_recursive>
 80024ea:	bf00      	nop
 80024ec:	20000137 	.word	0x20000137

080024f0 <__sinit_lock_release>:
 80024f0:	4801      	ldr	r0, [pc, #4]	; (80024f8 <__sinit_lock_release+0x8>)
 80024f2:	f000 b8a2 	b.w	800263a <__retarget_lock_release_recursive>
 80024f6:	bf00      	nop
 80024f8:	20000137 	.word	0x20000137

080024fc <__sinit>:
 80024fc:	b510      	push	{r4, lr}
 80024fe:	4604      	mov	r4, r0
 8002500:	f7ff fff0 	bl	80024e4 <__sinit_lock_acquire>
 8002504:	69a3      	ldr	r3, [r4, #24]
 8002506:	b11b      	cbz	r3, 8002510 <__sinit+0x14>
 8002508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800250c:	f7ff bff0 	b.w	80024f0 <__sinit_lock_release>
 8002510:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002514:	6523      	str	r3, [r4, #80]	; 0x50
 8002516:	4b13      	ldr	r3, [pc, #76]	; (8002564 <__sinit+0x68>)
 8002518:	4a13      	ldr	r2, [pc, #76]	; (8002568 <__sinit+0x6c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	62a2      	str	r2, [r4, #40]	; 0x28
 800251e:	42a3      	cmp	r3, r4
 8002520:	bf08      	it	eq
 8002522:	2301      	moveq	r3, #1
 8002524:	4620      	mov	r0, r4
 8002526:	bf08      	it	eq
 8002528:	61a3      	streq	r3, [r4, #24]
 800252a:	f000 f81f 	bl	800256c <__sfp>
 800252e:	6060      	str	r0, [r4, #4]
 8002530:	4620      	mov	r0, r4
 8002532:	f000 f81b 	bl	800256c <__sfp>
 8002536:	60a0      	str	r0, [r4, #8]
 8002538:	4620      	mov	r0, r4
 800253a:	f000 f817 	bl	800256c <__sfp>
 800253e:	2200      	movs	r2, #0
 8002540:	2104      	movs	r1, #4
 8002542:	60e0      	str	r0, [r4, #12]
 8002544:	6860      	ldr	r0, [r4, #4]
 8002546:	f7ff ff81 	bl	800244c <std>
 800254a:	2201      	movs	r2, #1
 800254c:	2109      	movs	r1, #9
 800254e:	68a0      	ldr	r0, [r4, #8]
 8002550:	f7ff ff7c 	bl	800244c <std>
 8002554:	2202      	movs	r2, #2
 8002556:	2112      	movs	r1, #18
 8002558:	68e0      	ldr	r0, [r4, #12]
 800255a:	f7ff ff77 	bl	800244c <std>
 800255e:	2301      	movs	r3, #1
 8002560:	61a3      	str	r3, [r4, #24]
 8002562:	e7d1      	b.n	8002508 <__sinit+0xc>
 8002564:	080030e0 	.word	0x080030e0
 8002568:	08002495 	.word	0x08002495

0800256c <__sfp>:
 800256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256e:	4607      	mov	r7, r0
 8002570:	f7ff ffac 	bl	80024cc <__sfp_lock_acquire>
 8002574:	4b1e      	ldr	r3, [pc, #120]	; (80025f0 <__sfp+0x84>)
 8002576:	681e      	ldr	r6, [r3, #0]
 8002578:	69b3      	ldr	r3, [r6, #24]
 800257a:	b913      	cbnz	r3, 8002582 <__sfp+0x16>
 800257c:	4630      	mov	r0, r6
 800257e:	f7ff ffbd 	bl	80024fc <__sinit>
 8002582:	3648      	adds	r6, #72	; 0x48
 8002584:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002588:	3b01      	subs	r3, #1
 800258a:	d503      	bpl.n	8002594 <__sfp+0x28>
 800258c:	6833      	ldr	r3, [r6, #0]
 800258e:	b30b      	cbz	r3, 80025d4 <__sfp+0x68>
 8002590:	6836      	ldr	r6, [r6, #0]
 8002592:	e7f7      	b.n	8002584 <__sfp+0x18>
 8002594:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002598:	b9d5      	cbnz	r5, 80025d0 <__sfp+0x64>
 800259a:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <__sfp+0x88>)
 800259c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80025a0:	60e3      	str	r3, [r4, #12]
 80025a2:	6665      	str	r5, [r4, #100]	; 0x64
 80025a4:	f000 f847 	bl	8002636 <__retarget_lock_init_recursive>
 80025a8:	f7ff ff96 	bl	80024d8 <__sfp_lock_release>
 80025ac:	2208      	movs	r2, #8
 80025ae:	4629      	mov	r1, r5
 80025b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80025b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80025b8:	6025      	str	r5, [r4, #0]
 80025ba:	61a5      	str	r5, [r4, #24]
 80025bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80025c0:	f7ff fd18 	bl	8001ff4 <memset>
 80025c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80025c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80025cc:	4620      	mov	r0, r4
 80025ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025d0:	3468      	adds	r4, #104	; 0x68
 80025d2:	e7d9      	b.n	8002588 <__sfp+0x1c>
 80025d4:	2104      	movs	r1, #4
 80025d6:	4638      	mov	r0, r7
 80025d8:	f7ff ff62 	bl	80024a0 <__sfmoreglue>
 80025dc:	4604      	mov	r4, r0
 80025de:	6030      	str	r0, [r6, #0]
 80025e0:	2800      	cmp	r0, #0
 80025e2:	d1d5      	bne.n	8002590 <__sfp+0x24>
 80025e4:	f7ff ff78 	bl	80024d8 <__sfp_lock_release>
 80025e8:	230c      	movs	r3, #12
 80025ea:	603b      	str	r3, [r7, #0]
 80025ec:	e7ee      	b.n	80025cc <__sfp+0x60>
 80025ee:	bf00      	nop
 80025f0:	080030e0 	.word	0x080030e0
 80025f4:	ffff0001 	.word	0xffff0001

080025f8 <_fwalk_reent>:
 80025f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025fc:	4606      	mov	r6, r0
 80025fe:	4688      	mov	r8, r1
 8002600:	2700      	movs	r7, #0
 8002602:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002606:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800260a:	f1b9 0901 	subs.w	r9, r9, #1
 800260e:	d505      	bpl.n	800261c <_fwalk_reent+0x24>
 8002610:	6824      	ldr	r4, [r4, #0]
 8002612:	2c00      	cmp	r4, #0
 8002614:	d1f7      	bne.n	8002606 <_fwalk_reent+0xe>
 8002616:	4638      	mov	r0, r7
 8002618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800261c:	89ab      	ldrh	r3, [r5, #12]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d907      	bls.n	8002632 <_fwalk_reent+0x3a>
 8002622:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002626:	3301      	adds	r3, #1
 8002628:	d003      	beq.n	8002632 <_fwalk_reent+0x3a>
 800262a:	4629      	mov	r1, r5
 800262c:	4630      	mov	r0, r6
 800262e:	47c0      	blx	r8
 8002630:	4307      	orrs	r7, r0
 8002632:	3568      	adds	r5, #104	; 0x68
 8002634:	e7e9      	b.n	800260a <_fwalk_reent+0x12>

08002636 <__retarget_lock_init_recursive>:
 8002636:	4770      	bx	lr

08002638 <__retarget_lock_acquire_recursive>:
 8002638:	4770      	bx	lr

0800263a <__retarget_lock_release_recursive>:
 800263a:	4770      	bx	lr

0800263c <__swhatbuf_r>:
 800263c:	b570      	push	{r4, r5, r6, lr}
 800263e:	460e      	mov	r6, r1
 8002640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002644:	4614      	mov	r4, r2
 8002646:	2900      	cmp	r1, #0
 8002648:	461d      	mov	r5, r3
 800264a:	b096      	sub	sp, #88	; 0x58
 800264c:	da07      	bge.n	800265e <__swhatbuf_r+0x22>
 800264e:	2300      	movs	r3, #0
 8002650:	602b      	str	r3, [r5, #0]
 8002652:	89b3      	ldrh	r3, [r6, #12]
 8002654:	061a      	lsls	r2, r3, #24
 8002656:	d410      	bmi.n	800267a <__swhatbuf_r+0x3e>
 8002658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800265c:	e00e      	b.n	800267c <__swhatbuf_r+0x40>
 800265e:	466a      	mov	r2, sp
 8002660:	f000 fca2 	bl	8002fa8 <_fstat_r>
 8002664:	2800      	cmp	r0, #0
 8002666:	dbf2      	blt.n	800264e <__swhatbuf_r+0x12>
 8002668:	9a01      	ldr	r2, [sp, #4]
 800266a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800266e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002672:	425a      	negs	r2, r3
 8002674:	415a      	adcs	r2, r3
 8002676:	602a      	str	r2, [r5, #0]
 8002678:	e7ee      	b.n	8002658 <__swhatbuf_r+0x1c>
 800267a:	2340      	movs	r3, #64	; 0x40
 800267c:	2000      	movs	r0, #0
 800267e:	6023      	str	r3, [r4, #0]
 8002680:	b016      	add	sp, #88	; 0x58
 8002682:	bd70      	pop	{r4, r5, r6, pc}

08002684 <__smakebuf_r>:
 8002684:	898b      	ldrh	r3, [r1, #12]
 8002686:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002688:	079d      	lsls	r5, r3, #30
 800268a:	4606      	mov	r6, r0
 800268c:	460c      	mov	r4, r1
 800268e:	d507      	bpl.n	80026a0 <__smakebuf_r+0x1c>
 8002690:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002694:	6023      	str	r3, [r4, #0]
 8002696:	6123      	str	r3, [r4, #16]
 8002698:	2301      	movs	r3, #1
 800269a:	6163      	str	r3, [r4, #20]
 800269c:	b002      	add	sp, #8
 800269e:	bd70      	pop	{r4, r5, r6, pc}
 80026a0:	466a      	mov	r2, sp
 80026a2:	ab01      	add	r3, sp, #4
 80026a4:	f7ff ffca 	bl	800263c <__swhatbuf_r>
 80026a8:	9900      	ldr	r1, [sp, #0]
 80026aa:	4605      	mov	r5, r0
 80026ac:	4630      	mov	r0, r6
 80026ae:	f000 f875 	bl	800279c <_malloc_r>
 80026b2:	b948      	cbnz	r0, 80026c8 <__smakebuf_r+0x44>
 80026b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026b8:	059a      	lsls	r2, r3, #22
 80026ba:	d4ef      	bmi.n	800269c <__smakebuf_r+0x18>
 80026bc:	f023 0303 	bic.w	r3, r3, #3
 80026c0:	f043 0302 	orr.w	r3, r3, #2
 80026c4:	81a3      	strh	r3, [r4, #12]
 80026c6:	e7e3      	b.n	8002690 <__smakebuf_r+0xc>
 80026c8:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <__smakebuf_r+0x7c>)
 80026ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80026cc:	89a3      	ldrh	r3, [r4, #12]
 80026ce:	6020      	str	r0, [r4, #0]
 80026d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d4:	81a3      	strh	r3, [r4, #12]
 80026d6:	9b00      	ldr	r3, [sp, #0]
 80026d8:	6120      	str	r0, [r4, #16]
 80026da:	6163      	str	r3, [r4, #20]
 80026dc:	9b01      	ldr	r3, [sp, #4]
 80026de:	b15b      	cbz	r3, 80026f8 <__smakebuf_r+0x74>
 80026e0:	4630      	mov	r0, r6
 80026e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026e6:	f000 fc71 	bl	8002fcc <_isatty_r>
 80026ea:	b128      	cbz	r0, 80026f8 <__smakebuf_r+0x74>
 80026ec:	89a3      	ldrh	r3, [r4, #12]
 80026ee:	f023 0303 	bic.w	r3, r3, #3
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	81a3      	strh	r3, [r4, #12]
 80026f8:	89a0      	ldrh	r0, [r4, #12]
 80026fa:	4305      	orrs	r5, r0
 80026fc:	81a5      	strh	r5, [r4, #12]
 80026fe:	e7cd      	b.n	800269c <__smakebuf_r+0x18>
 8002700:	08002495 	.word	0x08002495

08002704 <_free_r>:
 8002704:	b538      	push	{r3, r4, r5, lr}
 8002706:	4605      	mov	r5, r0
 8002708:	2900      	cmp	r1, #0
 800270a:	d043      	beq.n	8002794 <_free_r+0x90>
 800270c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002710:	1f0c      	subs	r4, r1, #4
 8002712:	2b00      	cmp	r3, #0
 8002714:	bfb8      	it	lt
 8002716:	18e4      	addlt	r4, r4, r3
 8002718:	f000 fc88 	bl	800302c <__malloc_lock>
 800271c:	4a1e      	ldr	r2, [pc, #120]	; (8002798 <_free_r+0x94>)
 800271e:	6813      	ldr	r3, [r2, #0]
 8002720:	4610      	mov	r0, r2
 8002722:	b933      	cbnz	r3, 8002732 <_free_r+0x2e>
 8002724:	6063      	str	r3, [r4, #4]
 8002726:	6014      	str	r4, [r2, #0]
 8002728:	4628      	mov	r0, r5
 800272a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800272e:	f000 bc83 	b.w	8003038 <__malloc_unlock>
 8002732:	42a3      	cmp	r3, r4
 8002734:	d90a      	bls.n	800274c <_free_r+0x48>
 8002736:	6821      	ldr	r1, [r4, #0]
 8002738:	1862      	adds	r2, r4, r1
 800273a:	4293      	cmp	r3, r2
 800273c:	bf01      	itttt	eq
 800273e:	681a      	ldreq	r2, [r3, #0]
 8002740:	685b      	ldreq	r3, [r3, #4]
 8002742:	1852      	addeq	r2, r2, r1
 8002744:	6022      	streq	r2, [r4, #0]
 8002746:	6063      	str	r3, [r4, #4]
 8002748:	6004      	str	r4, [r0, #0]
 800274a:	e7ed      	b.n	8002728 <_free_r+0x24>
 800274c:	461a      	mov	r2, r3
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	b10b      	cbz	r3, 8002756 <_free_r+0x52>
 8002752:	42a3      	cmp	r3, r4
 8002754:	d9fa      	bls.n	800274c <_free_r+0x48>
 8002756:	6811      	ldr	r1, [r2, #0]
 8002758:	1850      	adds	r0, r2, r1
 800275a:	42a0      	cmp	r0, r4
 800275c:	d10b      	bne.n	8002776 <_free_r+0x72>
 800275e:	6820      	ldr	r0, [r4, #0]
 8002760:	4401      	add	r1, r0
 8002762:	1850      	adds	r0, r2, r1
 8002764:	4283      	cmp	r3, r0
 8002766:	6011      	str	r1, [r2, #0]
 8002768:	d1de      	bne.n	8002728 <_free_r+0x24>
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	4401      	add	r1, r0
 8002770:	6011      	str	r1, [r2, #0]
 8002772:	6053      	str	r3, [r2, #4]
 8002774:	e7d8      	b.n	8002728 <_free_r+0x24>
 8002776:	d902      	bls.n	800277e <_free_r+0x7a>
 8002778:	230c      	movs	r3, #12
 800277a:	602b      	str	r3, [r5, #0]
 800277c:	e7d4      	b.n	8002728 <_free_r+0x24>
 800277e:	6820      	ldr	r0, [r4, #0]
 8002780:	1821      	adds	r1, r4, r0
 8002782:	428b      	cmp	r3, r1
 8002784:	bf01      	itttt	eq
 8002786:	6819      	ldreq	r1, [r3, #0]
 8002788:	685b      	ldreq	r3, [r3, #4]
 800278a:	1809      	addeq	r1, r1, r0
 800278c:	6021      	streq	r1, [r4, #0]
 800278e:	6063      	str	r3, [r4, #4]
 8002790:	6054      	str	r4, [r2, #4]
 8002792:	e7c9      	b.n	8002728 <_free_r+0x24>
 8002794:	bd38      	pop	{r3, r4, r5, pc}
 8002796:	bf00      	nop
 8002798:	20000090 	.word	0x20000090

0800279c <_malloc_r>:
 800279c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279e:	1ccd      	adds	r5, r1, #3
 80027a0:	f025 0503 	bic.w	r5, r5, #3
 80027a4:	3508      	adds	r5, #8
 80027a6:	2d0c      	cmp	r5, #12
 80027a8:	bf38      	it	cc
 80027aa:	250c      	movcc	r5, #12
 80027ac:	2d00      	cmp	r5, #0
 80027ae:	4606      	mov	r6, r0
 80027b0:	db01      	blt.n	80027b6 <_malloc_r+0x1a>
 80027b2:	42a9      	cmp	r1, r5
 80027b4:	d903      	bls.n	80027be <_malloc_r+0x22>
 80027b6:	230c      	movs	r3, #12
 80027b8:	6033      	str	r3, [r6, #0]
 80027ba:	2000      	movs	r0, #0
 80027bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027be:	f000 fc35 	bl	800302c <__malloc_lock>
 80027c2:	4921      	ldr	r1, [pc, #132]	; (8002848 <_malloc_r+0xac>)
 80027c4:	680a      	ldr	r2, [r1, #0]
 80027c6:	4614      	mov	r4, r2
 80027c8:	b99c      	cbnz	r4, 80027f2 <_malloc_r+0x56>
 80027ca:	4f20      	ldr	r7, [pc, #128]	; (800284c <_malloc_r+0xb0>)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	b923      	cbnz	r3, 80027da <_malloc_r+0x3e>
 80027d0:	4621      	mov	r1, r4
 80027d2:	4630      	mov	r0, r6
 80027d4:	f000 fb72 	bl	8002ebc <_sbrk_r>
 80027d8:	6038      	str	r0, [r7, #0]
 80027da:	4629      	mov	r1, r5
 80027dc:	4630      	mov	r0, r6
 80027de:	f000 fb6d 	bl	8002ebc <_sbrk_r>
 80027e2:	1c43      	adds	r3, r0, #1
 80027e4:	d123      	bne.n	800282e <_malloc_r+0x92>
 80027e6:	230c      	movs	r3, #12
 80027e8:	4630      	mov	r0, r6
 80027ea:	6033      	str	r3, [r6, #0]
 80027ec:	f000 fc24 	bl	8003038 <__malloc_unlock>
 80027f0:	e7e3      	b.n	80027ba <_malloc_r+0x1e>
 80027f2:	6823      	ldr	r3, [r4, #0]
 80027f4:	1b5b      	subs	r3, r3, r5
 80027f6:	d417      	bmi.n	8002828 <_malloc_r+0x8c>
 80027f8:	2b0b      	cmp	r3, #11
 80027fa:	d903      	bls.n	8002804 <_malloc_r+0x68>
 80027fc:	6023      	str	r3, [r4, #0]
 80027fe:	441c      	add	r4, r3
 8002800:	6025      	str	r5, [r4, #0]
 8002802:	e004      	b.n	800280e <_malloc_r+0x72>
 8002804:	6863      	ldr	r3, [r4, #4]
 8002806:	42a2      	cmp	r2, r4
 8002808:	bf0c      	ite	eq
 800280a:	600b      	streq	r3, [r1, #0]
 800280c:	6053      	strne	r3, [r2, #4]
 800280e:	4630      	mov	r0, r6
 8002810:	f000 fc12 	bl	8003038 <__malloc_unlock>
 8002814:	f104 000b 	add.w	r0, r4, #11
 8002818:	1d23      	adds	r3, r4, #4
 800281a:	f020 0007 	bic.w	r0, r0, #7
 800281e:	1ac2      	subs	r2, r0, r3
 8002820:	d0cc      	beq.n	80027bc <_malloc_r+0x20>
 8002822:	1a1b      	subs	r3, r3, r0
 8002824:	50a3      	str	r3, [r4, r2]
 8002826:	e7c9      	b.n	80027bc <_malloc_r+0x20>
 8002828:	4622      	mov	r2, r4
 800282a:	6864      	ldr	r4, [r4, #4]
 800282c:	e7cc      	b.n	80027c8 <_malloc_r+0x2c>
 800282e:	1cc4      	adds	r4, r0, #3
 8002830:	f024 0403 	bic.w	r4, r4, #3
 8002834:	42a0      	cmp	r0, r4
 8002836:	d0e3      	beq.n	8002800 <_malloc_r+0x64>
 8002838:	1a21      	subs	r1, r4, r0
 800283a:	4630      	mov	r0, r6
 800283c:	f000 fb3e 	bl	8002ebc <_sbrk_r>
 8002840:	3001      	adds	r0, #1
 8002842:	d1dd      	bne.n	8002800 <_malloc_r+0x64>
 8002844:	e7cf      	b.n	80027e6 <_malloc_r+0x4a>
 8002846:	bf00      	nop
 8002848:	20000090 	.word	0x20000090
 800284c:	20000094 	.word	0x20000094

08002850 <__sfputc_r>:
 8002850:	6893      	ldr	r3, [r2, #8]
 8002852:	b410      	push	{r4}
 8002854:	3b01      	subs	r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	6093      	str	r3, [r2, #8]
 800285a:	da07      	bge.n	800286c <__sfputc_r+0x1c>
 800285c:	6994      	ldr	r4, [r2, #24]
 800285e:	42a3      	cmp	r3, r4
 8002860:	db01      	blt.n	8002866 <__sfputc_r+0x16>
 8002862:	290a      	cmp	r1, #10
 8002864:	d102      	bne.n	800286c <__sfputc_r+0x1c>
 8002866:	bc10      	pop	{r4}
 8002868:	f7ff bc6e 	b.w	8002148 <__swbuf_r>
 800286c:	6813      	ldr	r3, [r2, #0]
 800286e:	1c58      	adds	r0, r3, #1
 8002870:	6010      	str	r0, [r2, #0]
 8002872:	7019      	strb	r1, [r3, #0]
 8002874:	4608      	mov	r0, r1
 8002876:	bc10      	pop	{r4}
 8002878:	4770      	bx	lr

0800287a <__sfputs_r>:
 800287a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800287c:	4606      	mov	r6, r0
 800287e:	460f      	mov	r7, r1
 8002880:	4614      	mov	r4, r2
 8002882:	18d5      	adds	r5, r2, r3
 8002884:	42ac      	cmp	r4, r5
 8002886:	d101      	bne.n	800288c <__sfputs_r+0x12>
 8002888:	2000      	movs	r0, #0
 800288a:	e007      	b.n	800289c <__sfputs_r+0x22>
 800288c:	463a      	mov	r2, r7
 800288e:	4630      	mov	r0, r6
 8002890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002894:	f7ff ffdc 	bl	8002850 <__sfputc_r>
 8002898:	1c43      	adds	r3, r0, #1
 800289a:	d1f3      	bne.n	8002884 <__sfputs_r+0xa>
 800289c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080028a0 <_vfiprintf_r>:
 80028a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028a4:	460d      	mov	r5, r1
 80028a6:	4614      	mov	r4, r2
 80028a8:	4698      	mov	r8, r3
 80028aa:	4606      	mov	r6, r0
 80028ac:	b09d      	sub	sp, #116	; 0x74
 80028ae:	b118      	cbz	r0, 80028b8 <_vfiprintf_r+0x18>
 80028b0:	6983      	ldr	r3, [r0, #24]
 80028b2:	b90b      	cbnz	r3, 80028b8 <_vfiprintf_r+0x18>
 80028b4:	f7ff fe22 	bl	80024fc <__sinit>
 80028b8:	4b89      	ldr	r3, [pc, #548]	; (8002ae0 <_vfiprintf_r+0x240>)
 80028ba:	429d      	cmp	r5, r3
 80028bc:	d11b      	bne.n	80028f6 <_vfiprintf_r+0x56>
 80028be:	6875      	ldr	r5, [r6, #4]
 80028c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80028c2:	07d9      	lsls	r1, r3, #31
 80028c4:	d405      	bmi.n	80028d2 <_vfiprintf_r+0x32>
 80028c6:	89ab      	ldrh	r3, [r5, #12]
 80028c8:	059a      	lsls	r2, r3, #22
 80028ca:	d402      	bmi.n	80028d2 <_vfiprintf_r+0x32>
 80028cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80028ce:	f7ff feb3 	bl	8002638 <__retarget_lock_acquire_recursive>
 80028d2:	89ab      	ldrh	r3, [r5, #12]
 80028d4:	071b      	lsls	r3, r3, #28
 80028d6:	d501      	bpl.n	80028dc <_vfiprintf_r+0x3c>
 80028d8:	692b      	ldr	r3, [r5, #16]
 80028da:	b9eb      	cbnz	r3, 8002918 <_vfiprintf_r+0x78>
 80028dc:	4629      	mov	r1, r5
 80028de:	4630      	mov	r0, r6
 80028e0:	f7ff fc84 	bl	80021ec <__swsetup_r>
 80028e4:	b1c0      	cbz	r0, 8002918 <_vfiprintf_r+0x78>
 80028e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80028e8:	07dc      	lsls	r4, r3, #31
 80028ea:	d50e      	bpl.n	800290a <_vfiprintf_r+0x6a>
 80028ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028f0:	b01d      	add	sp, #116	; 0x74
 80028f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028f6:	4b7b      	ldr	r3, [pc, #492]	; (8002ae4 <_vfiprintf_r+0x244>)
 80028f8:	429d      	cmp	r5, r3
 80028fa:	d101      	bne.n	8002900 <_vfiprintf_r+0x60>
 80028fc:	68b5      	ldr	r5, [r6, #8]
 80028fe:	e7df      	b.n	80028c0 <_vfiprintf_r+0x20>
 8002900:	4b79      	ldr	r3, [pc, #484]	; (8002ae8 <_vfiprintf_r+0x248>)
 8002902:	429d      	cmp	r5, r3
 8002904:	bf08      	it	eq
 8002906:	68f5      	ldreq	r5, [r6, #12]
 8002908:	e7da      	b.n	80028c0 <_vfiprintf_r+0x20>
 800290a:	89ab      	ldrh	r3, [r5, #12]
 800290c:	0598      	lsls	r0, r3, #22
 800290e:	d4ed      	bmi.n	80028ec <_vfiprintf_r+0x4c>
 8002910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002912:	f7ff fe92 	bl	800263a <__retarget_lock_release_recursive>
 8002916:	e7e9      	b.n	80028ec <_vfiprintf_r+0x4c>
 8002918:	2300      	movs	r3, #0
 800291a:	9309      	str	r3, [sp, #36]	; 0x24
 800291c:	2320      	movs	r3, #32
 800291e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002922:	2330      	movs	r3, #48	; 0x30
 8002924:	f04f 0901 	mov.w	r9, #1
 8002928:	f8cd 800c 	str.w	r8, [sp, #12]
 800292c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002aec <_vfiprintf_r+0x24c>
 8002930:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002934:	4623      	mov	r3, r4
 8002936:	469a      	mov	sl, r3
 8002938:	f813 2b01 	ldrb.w	r2, [r3], #1
 800293c:	b10a      	cbz	r2, 8002942 <_vfiprintf_r+0xa2>
 800293e:	2a25      	cmp	r2, #37	; 0x25
 8002940:	d1f9      	bne.n	8002936 <_vfiprintf_r+0x96>
 8002942:	ebba 0b04 	subs.w	fp, sl, r4
 8002946:	d00b      	beq.n	8002960 <_vfiprintf_r+0xc0>
 8002948:	465b      	mov	r3, fp
 800294a:	4622      	mov	r2, r4
 800294c:	4629      	mov	r1, r5
 800294e:	4630      	mov	r0, r6
 8002950:	f7ff ff93 	bl	800287a <__sfputs_r>
 8002954:	3001      	adds	r0, #1
 8002956:	f000 80aa 	beq.w	8002aae <_vfiprintf_r+0x20e>
 800295a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800295c:	445a      	add	r2, fp
 800295e:	9209      	str	r2, [sp, #36]	; 0x24
 8002960:	f89a 3000 	ldrb.w	r3, [sl]
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 80a2 	beq.w	8002aae <_vfiprintf_r+0x20e>
 800296a:	2300      	movs	r3, #0
 800296c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002970:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002974:	f10a 0a01 	add.w	sl, sl, #1
 8002978:	9304      	str	r3, [sp, #16]
 800297a:	9307      	str	r3, [sp, #28]
 800297c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002980:	931a      	str	r3, [sp, #104]	; 0x68
 8002982:	4654      	mov	r4, sl
 8002984:	2205      	movs	r2, #5
 8002986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800298a:	4858      	ldr	r0, [pc, #352]	; (8002aec <_vfiprintf_r+0x24c>)
 800298c:	f000 fb40 	bl	8003010 <memchr>
 8002990:	9a04      	ldr	r2, [sp, #16]
 8002992:	b9d8      	cbnz	r0, 80029cc <_vfiprintf_r+0x12c>
 8002994:	06d1      	lsls	r1, r2, #27
 8002996:	bf44      	itt	mi
 8002998:	2320      	movmi	r3, #32
 800299a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800299e:	0713      	lsls	r3, r2, #28
 80029a0:	bf44      	itt	mi
 80029a2:	232b      	movmi	r3, #43	; 0x2b
 80029a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029a8:	f89a 3000 	ldrb.w	r3, [sl]
 80029ac:	2b2a      	cmp	r3, #42	; 0x2a
 80029ae:	d015      	beq.n	80029dc <_vfiprintf_r+0x13c>
 80029b0:	4654      	mov	r4, sl
 80029b2:	2000      	movs	r0, #0
 80029b4:	f04f 0c0a 	mov.w	ip, #10
 80029b8:	9a07      	ldr	r2, [sp, #28]
 80029ba:	4621      	mov	r1, r4
 80029bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029c0:	3b30      	subs	r3, #48	; 0x30
 80029c2:	2b09      	cmp	r3, #9
 80029c4:	d94e      	bls.n	8002a64 <_vfiprintf_r+0x1c4>
 80029c6:	b1b0      	cbz	r0, 80029f6 <_vfiprintf_r+0x156>
 80029c8:	9207      	str	r2, [sp, #28]
 80029ca:	e014      	b.n	80029f6 <_vfiprintf_r+0x156>
 80029cc:	eba0 0308 	sub.w	r3, r0, r8
 80029d0:	fa09 f303 	lsl.w	r3, r9, r3
 80029d4:	4313      	orrs	r3, r2
 80029d6:	46a2      	mov	sl, r4
 80029d8:	9304      	str	r3, [sp, #16]
 80029da:	e7d2      	b.n	8002982 <_vfiprintf_r+0xe2>
 80029dc:	9b03      	ldr	r3, [sp, #12]
 80029de:	1d19      	adds	r1, r3, #4
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	9103      	str	r1, [sp, #12]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	bfbb      	ittet	lt
 80029e8:	425b      	neglt	r3, r3
 80029ea:	f042 0202 	orrlt.w	r2, r2, #2
 80029ee:	9307      	strge	r3, [sp, #28]
 80029f0:	9307      	strlt	r3, [sp, #28]
 80029f2:	bfb8      	it	lt
 80029f4:	9204      	strlt	r2, [sp, #16]
 80029f6:	7823      	ldrb	r3, [r4, #0]
 80029f8:	2b2e      	cmp	r3, #46	; 0x2e
 80029fa:	d10c      	bne.n	8002a16 <_vfiprintf_r+0x176>
 80029fc:	7863      	ldrb	r3, [r4, #1]
 80029fe:	2b2a      	cmp	r3, #42	; 0x2a
 8002a00:	d135      	bne.n	8002a6e <_vfiprintf_r+0x1ce>
 8002a02:	9b03      	ldr	r3, [sp, #12]
 8002a04:	3402      	adds	r4, #2
 8002a06:	1d1a      	adds	r2, r3, #4
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	9203      	str	r2, [sp, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bfb8      	it	lt
 8002a10:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002a14:	9305      	str	r3, [sp, #20]
 8002a16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002afc <_vfiprintf_r+0x25c>
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	4650      	mov	r0, sl
 8002a1e:	7821      	ldrb	r1, [r4, #0]
 8002a20:	f000 faf6 	bl	8003010 <memchr>
 8002a24:	b140      	cbz	r0, 8002a38 <_vfiprintf_r+0x198>
 8002a26:	2340      	movs	r3, #64	; 0x40
 8002a28:	eba0 000a 	sub.w	r0, r0, sl
 8002a2c:	fa03 f000 	lsl.w	r0, r3, r0
 8002a30:	9b04      	ldr	r3, [sp, #16]
 8002a32:	3401      	adds	r4, #1
 8002a34:	4303      	orrs	r3, r0
 8002a36:	9304      	str	r3, [sp, #16]
 8002a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a3c:	2206      	movs	r2, #6
 8002a3e:	482c      	ldr	r0, [pc, #176]	; (8002af0 <_vfiprintf_r+0x250>)
 8002a40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a44:	f000 fae4 	bl	8003010 <memchr>
 8002a48:	2800      	cmp	r0, #0
 8002a4a:	d03f      	beq.n	8002acc <_vfiprintf_r+0x22c>
 8002a4c:	4b29      	ldr	r3, [pc, #164]	; (8002af4 <_vfiprintf_r+0x254>)
 8002a4e:	bb1b      	cbnz	r3, 8002a98 <_vfiprintf_r+0x1f8>
 8002a50:	9b03      	ldr	r3, [sp, #12]
 8002a52:	3307      	adds	r3, #7
 8002a54:	f023 0307 	bic.w	r3, r3, #7
 8002a58:	3308      	adds	r3, #8
 8002a5a:	9303      	str	r3, [sp, #12]
 8002a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a5e:	443b      	add	r3, r7
 8002a60:	9309      	str	r3, [sp, #36]	; 0x24
 8002a62:	e767      	b.n	8002934 <_vfiprintf_r+0x94>
 8002a64:	460c      	mov	r4, r1
 8002a66:	2001      	movs	r0, #1
 8002a68:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a6c:	e7a5      	b.n	80029ba <_vfiprintf_r+0x11a>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f04f 0c0a 	mov.w	ip, #10
 8002a74:	4619      	mov	r1, r3
 8002a76:	3401      	adds	r4, #1
 8002a78:	9305      	str	r3, [sp, #20]
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a80:	3a30      	subs	r2, #48	; 0x30
 8002a82:	2a09      	cmp	r2, #9
 8002a84:	d903      	bls.n	8002a8e <_vfiprintf_r+0x1ee>
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0c5      	beq.n	8002a16 <_vfiprintf_r+0x176>
 8002a8a:	9105      	str	r1, [sp, #20]
 8002a8c:	e7c3      	b.n	8002a16 <_vfiprintf_r+0x176>
 8002a8e:	4604      	mov	r4, r0
 8002a90:	2301      	movs	r3, #1
 8002a92:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a96:	e7f0      	b.n	8002a7a <_vfiprintf_r+0x1da>
 8002a98:	ab03      	add	r3, sp, #12
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	462a      	mov	r2, r5
 8002a9e:	4630      	mov	r0, r6
 8002aa0:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <_vfiprintf_r+0x258>)
 8002aa2:	a904      	add	r1, sp, #16
 8002aa4:	f3af 8000 	nop.w
 8002aa8:	4607      	mov	r7, r0
 8002aaa:	1c78      	adds	r0, r7, #1
 8002aac:	d1d6      	bne.n	8002a5c <_vfiprintf_r+0x1bc>
 8002aae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ab0:	07d9      	lsls	r1, r3, #31
 8002ab2:	d405      	bmi.n	8002ac0 <_vfiprintf_r+0x220>
 8002ab4:	89ab      	ldrh	r3, [r5, #12]
 8002ab6:	059a      	lsls	r2, r3, #22
 8002ab8:	d402      	bmi.n	8002ac0 <_vfiprintf_r+0x220>
 8002aba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002abc:	f7ff fdbd 	bl	800263a <__retarget_lock_release_recursive>
 8002ac0:	89ab      	ldrh	r3, [r5, #12]
 8002ac2:	065b      	lsls	r3, r3, #25
 8002ac4:	f53f af12 	bmi.w	80028ec <_vfiprintf_r+0x4c>
 8002ac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002aca:	e711      	b.n	80028f0 <_vfiprintf_r+0x50>
 8002acc:	ab03      	add	r3, sp, #12
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	462a      	mov	r2, r5
 8002ad2:	4630      	mov	r0, r6
 8002ad4:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <_vfiprintf_r+0x258>)
 8002ad6:	a904      	add	r1, sp, #16
 8002ad8:	f000 f882 	bl	8002be0 <_printf_i>
 8002adc:	e7e4      	b.n	8002aa8 <_vfiprintf_r+0x208>
 8002ade:	bf00      	nop
 8002ae0:	08003104 	.word	0x08003104
 8002ae4:	08003124 	.word	0x08003124
 8002ae8:	080030e4 	.word	0x080030e4
 8002aec:	08003144 	.word	0x08003144
 8002af0:	0800314e 	.word	0x0800314e
 8002af4:	00000000 	.word	0x00000000
 8002af8:	0800287b 	.word	0x0800287b
 8002afc:	0800314a 	.word	0x0800314a

08002b00 <_printf_common>:
 8002b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b04:	4616      	mov	r6, r2
 8002b06:	4699      	mov	r9, r3
 8002b08:	688a      	ldr	r2, [r1, #8]
 8002b0a:	690b      	ldr	r3, [r1, #16]
 8002b0c:	4607      	mov	r7, r0
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	bfb8      	it	lt
 8002b12:	4613      	movlt	r3, r2
 8002b14:	6033      	str	r3, [r6, #0]
 8002b16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b1a:	460c      	mov	r4, r1
 8002b1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b20:	b10a      	cbz	r2, 8002b26 <_printf_common+0x26>
 8002b22:	3301      	adds	r3, #1
 8002b24:	6033      	str	r3, [r6, #0]
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	0699      	lsls	r1, r3, #26
 8002b2a:	bf42      	ittt	mi
 8002b2c:	6833      	ldrmi	r3, [r6, #0]
 8002b2e:	3302      	addmi	r3, #2
 8002b30:	6033      	strmi	r3, [r6, #0]
 8002b32:	6825      	ldr	r5, [r4, #0]
 8002b34:	f015 0506 	ands.w	r5, r5, #6
 8002b38:	d106      	bne.n	8002b48 <_printf_common+0x48>
 8002b3a:	f104 0a19 	add.w	sl, r4, #25
 8002b3e:	68e3      	ldr	r3, [r4, #12]
 8002b40:	6832      	ldr	r2, [r6, #0]
 8002b42:	1a9b      	subs	r3, r3, r2
 8002b44:	42ab      	cmp	r3, r5
 8002b46:	dc28      	bgt.n	8002b9a <_printf_common+0x9a>
 8002b48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b4c:	1e13      	subs	r3, r2, #0
 8002b4e:	6822      	ldr	r2, [r4, #0]
 8002b50:	bf18      	it	ne
 8002b52:	2301      	movne	r3, #1
 8002b54:	0692      	lsls	r2, r2, #26
 8002b56:	d42d      	bmi.n	8002bb4 <_printf_common+0xb4>
 8002b58:	4649      	mov	r1, r9
 8002b5a:	4638      	mov	r0, r7
 8002b5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b60:	47c0      	blx	r8
 8002b62:	3001      	adds	r0, #1
 8002b64:	d020      	beq.n	8002ba8 <_printf_common+0xa8>
 8002b66:	6823      	ldr	r3, [r4, #0]
 8002b68:	68e5      	ldr	r5, [r4, #12]
 8002b6a:	f003 0306 	and.w	r3, r3, #6
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	bf18      	it	ne
 8002b72:	2500      	movne	r5, #0
 8002b74:	6832      	ldr	r2, [r6, #0]
 8002b76:	f04f 0600 	mov.w	r6, #0
 8002b7a:	68a3      	ldr	r3, [r4, #8]
 8002b7c:	bf08      	it	eq
 8002b7e:	1aad      	subeq	r5, r5, r2
 8002b80:	6922      	ldr	r2, [r4, #16]
 8002b82:	bf08      	it	eq
 8002b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	bfc4      	itt	gt
 8002b8c:	1a9b      	subgt	r3, r3, r2
 8002b8e:	18ed      	addgt	r5, r5, r3
 8002b90:	341a      	adds	r4, #26
 8002b92:	42b5      	cmp	r5, r6
 8002b94:	d11a      	bne.n	8002bcc <_printf_common+0xcc>
 8002b96:	2000      	movs	r0, #0
 8002b98:	e008      	b.n	8002bac <_printf_common+0xac>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	4652      	mov	r2, sl
 8002b9e:	4649      	mov	r1, r9
 8002ba0:	4638      	mov	r0, r7
 8002ba2:	47c0      	blx	r8
 8002ba4:	3001      	adds	r0, #1
 8002ba6:	d103      	bne.n	8002bb0 <_printf_common+0xb0>
 8002ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bb0:	3501      	adds	r5, #1
 8002bb2:	e7c4      	b.n	8002b3e <_printf_common+0x3e>
 8002bb4:	2030      	movs	r0, #48	; 0x30
 8002bb6:	18e1      	adds	r1, r4, r3
 8002bb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002bc2:	4422      	add	r2, r4
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002bca:	e7c5      	b.n	8002b58 <_printf_common+0x58>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	4622      	mov	r2, r4
 8002bd0:	4649      	mov	r1, r9
 8002bd2:	4638      	mov	r0, r7
 8002bd4:	47c0      	blx	r8
 8002bd6:	3001      	adds	r0, #1
 8002bd8:	d0e6      	beq.n	8002ba8 <_printf_common+0xa8>
 8002bda:	3601      	adds	r6, #1
 8002bdc:	e7d9      	b.n	8002b92 <_printf_common+0x92>
	...

08002be0 <_printf_i>:
 8002be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002be4:	460c      	mov	r4, r1
 8002be6:	7e27      	ldrb	r7, [r4, #24]
 8002be8:	4691      	mov	r9, r2
 8002bea:	2f78      	cmp	r7, #120	; 0x78
 8002bec:	4680      	mov	r8, r0
 8002bee:	469a      	mov	sl, r3
 8002bf0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002bf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002bf6:	d807      	bhi.n	8002c08 <_printf_i+0x28>
 8002bf8:	2f62      	cmp	r7, #98	; 0x62
 8002bfa:	d80a      	bhi.n	8002c12 <_printf_i+0x32>
 8002bfc:	2f00      	cmp	r7, #0
 8002bfe:	f000 80d9 	beq.w	8002db4 <_printf_i+0x1d4>
 8002c02:	2f58      	cmp	r7, #88	; 0x58
 8002c04:	f000 80a4 	beq.w	8002d50 <_printf_i+0x170>
 8002c08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002c0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c10:	e03a      	b.n	8002c88 <_printf_i+0xa8>
 8002c12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c16:	2b15      	cmp	r3, #21
 8002c18:	d8f6      	bhi.n	8002c08 <_printf_i+0x28>
 8002c1a:	a001      	add	r0, pc, #4	; (adr r0, 8002c20 <_printf_i+0x40>)
 8002c1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002c20:	08002c79 	.word	0x08002c79
 8002c24:	08002c8d 	.word	0x08002c8d
 8002c28:	08002c09 	.word	0x08002c09
 8002c2c:	08002c09 	.word	0x08002c09
 8002c30:	08002c09 	.word	0x08002c09
 8002c34:	08002c09 	.word	0x08002c09
 8002c38:	08002c8d 	.word	0x08002c8d
 8002c3c:	08002c09 	.word	0x08002c09
 8002c40:	08002c09 	.word	0x08002c09
 8002c44:	08002c09 	.word	0x08002c09
 8002c48:	08002c09 	.word	0x08002c09
 8002c4c:	08002d9b 	.word	0x08002d9b
 8002c50:	08002cbd 	.word	0x08002cbd
 8002c54:	08002d7d 	.word	0x08002d7d
 8002c58:	08002c09 	.word	0x08002c09
 8002c5c:	08002c09 	.word	0x08002c09
 8002c60:	08002dbd 	.word	0x08002dbd
 8002c64:	08002c09 	.word	0x08002c09
 8002c68:	08002cbd 	.word	0x08002cbd
 8002c6c:	08002c09 	.word	0x08002c09
 8002c70:	08002c09 	.word	0x08002c09
 8002c74:	08002d85 	.word	0x08002d85
 8002c78:	680b      	ldr	r3, [r1, #0]
 8002c7a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002c7e:	1d1a      	adds	r2, r3, #4
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	600a      	str	r2, [r1, #0]
 8002c84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0a4      	b.n	8002dd6 <_printf_i+0x1f6>
 8002c8c:	6825      	ldr	r5, [r4, #0]
 8002c8e:	6808      	ldr	r0, [r1, #0]
 8002c90:	062e      	lsls	r6, r5, #24
 8002c92:	f100 0304 	add.w	r3, r0, #4
 8002c96:	d50a      	bpl.n	8002cae <_printf_i+0xce>
 8002c98:	6805      	ldr	r5, [r0, #0]
 8002c9a:	600b      	str	r3, [r1, #0]
 8002c9c:	2d00      	cmp	r5, #0
 8002c9e:	da03      	bge.n	8002ca8 <_printf_i+0xc8>
 8002ca0:	232d      	movs	r3, #45	; 0x2d
 8002ca2:	426d      	negs	r5, r5
 8002ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ca8:	230a      	movs	r3, #10
 8002caa:	485e      	ldr	r0, [pc, #376]	; (8002e24 <_printf_i+0x244>)
 8002cac:	e019      	b.n	8002ce2 <_printf_i+0x102>
 8002cae:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002cb2:	6805      	ldr	r5, [r0, #0]
 8002cb4:	600b      	str	r3, [r1, #0]
 8002cb6:	bf18      	it	ne
 8002cb8:	b22d      	sxthne	r5, r5
 8002cba:	e7ef      	b.n	8002c9c <_printf_i+0xbc>
 8002cbc:	680b      	ldr	r3, [r1, #0]
 8002cbe:	6825      	ldr	r5, [r4, #0]
 8002cc0:	1d18      	adds	r0, r3, #4
 8002cc2:	6008      	str	r0, [r1, #0]
 8002cc4:	0628      	lsls	r0, r5, #24
 8002cc6:	d501      	bpl.n	8002ccc <_printf_i+0xec>
 8002cc8:	681d      	ldr	r5, [r3, #0]
 8002cca:	e002      	b.n	8002cd2 <_printf_i+0xf2>
 8002ccc:	0669      	lsls	r1, r5, #25
 8002cce:	d5fb      	bpl.n	8002cc8 <_printf_i+0xe8>
 8002cd0:	881d      	ldrh	r5, [r3, #0]
 8002cd2:	2f6f      	cmp	r7, #111	; 0x6f
 8002cd4:	bf0c      	ite	eq
 8002cd6:	2308      	moveq	r3, #8
 8002cd8:	230a      	movne	r3, #10
 8002cda:	4852      	ldr	r0, [pc, #328]	; (8002e24 <_printf_i+0x244>)
 8002cdc:	2100      	movs	r1, #0
 8002cde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ce2:	6866      	ldr	r6, [r4, #4]
 8002ce4:	2e00      	cmp	r6, #0
 8002ce6:	bfa8      	it	ge
 8002ce8:	6821      	ldrge	r1, [r4, #0]
 8002cea:	60a6      	str	r6, [r4, #8]
 8002cec:	bfa4      	itt	ge
 8002cee:	f021 0104 	bicge.w	r1, r1, #4
 8002cf2:	6021      	strge	r1, [r4, #0]
 8002cf4:	b90d      	cbnz	r5, 8002cfa <_printf_i+0x11a>
 8002cf6:	2e00      	cmp	r6, #0
 8002cf8:	d04d      	beq.n	8002d96 <_printf_i+0x1b6>
 8002cfa:	4616      	mov	r6, r2
 8002cfc:	fbb5 f1f3 	udiv	r1, r5, r3
 8002d00:	fb03 5711 	mls	r7, r3, r1, r5
 8002d04:	5dc7      	ldrb	r7, [r0, r7]
 8002d06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d0a:	462f      	mov	r7, r5
 8002d0c:	42bb      	cmp	r3, r7
 8002d0e:	460d      	mov	r5, r1
 8002d10:	d9f4      	bls.n	8002cfc <_printf_i+0x11c>
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d10b      	bne.n	8002d2e <_printf_i+0x14e>
 8002d16:	6823      	ldr	r3, [r4, #0]
 8002d18:	07df      	lsls	r7, r3, #31
 8002d1a:	d508      	bpl.n	8002d2e <_printf_i+0x14e>
 8002d1c:	6923      	ldr	r3, [r4, #16]
 8002d1e:	6861      	ldr	r1, [r4, #4]
 8002d20:	4299      	cmp	r1, r3
 8002d22:	bfde      	ittt	le
 8002d24:	2330      	movle	r3, #48	; 0x30
 8002d26:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002d2a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002d2e:	1b92      	subs	r2, r2, r6
 8002d30:	6122      	str	r2, [r4, #16]
 8002d32:	464b      	mov	r3, r9
 8002d34:	4621      	mov	r1, r4
 8002d36:	4640      	mov	r0, r8
 8002d38:	f8cd a000 	str.w	sl, [sp]
 8002d3c:	aa03      	add	r2, sp, #12
 8002d3e:	f7ff fedf 	bl	8002b00 <_printf_common>
 8002d42:	3001      	adds	r0, #1
 8002d44:	d14c      	bne.n	8002de0 <_printf_i+0x200>
 8002d46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d4a:	b004      	add	sp, #16
 8002d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d50:	4834      	ldr	r0, [pc, #208]	; (8002e24 <_printf_i+0x244>)
 8002d52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002d56:	680e      	ldr	r6, [r1, #0]
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	f856 5b04 	ldr.w	r5, [r6], #4
 8002d5e:	061f      	lsls	r7, r3, #24
 8002d60:	600e      	str	r6, [r1, #0]
 8002d62:	d514      	bpl.n	8002d8e <_printf_i+0x1ae>
 8002d64:	07d9      	lsls	r1, r3, #31
 8002d66:	bf44      	itt	mi
 8002d68:	f043 0320 	orrmi.w	r3, r3, #32
 8002d6c:	6023      	strmi	r3, [r4, #0]
 8002d6e:	b91d      	cbnz	r5, 8002d78 <_printf_i+0x198>
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	f023 0320 	bic.w	r3, r3, #32
 8002d76:	6023      	str	r3, [r4, #0]
 8002d78:	2310      	movs	r3, #16
 8002d7a:	e7af      	b.n	8002cdc <_printf_i+0xfc>
 8002d7c:	6823      	ldr	r3, [r4, #0]
 8002d7e:	f043 0320 	orr.w	r3, r3, #32
 8002d82:	6023      	str	r3, [r4, #0]
 8002d84:	2378      	movs	r3, #120	; 0x78
 8002d86:	4828      	ldr	r0, [pc, #160]	; (8002e28 <_printf_i+0x248>)
 8002d88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d8c:	e7e3      	b.n	8002d56 <_printf_i+0x176>
 8002d8e:	065e      	lsls	r6, r3, #25
 8002d90:	bf48      	it	mi
 8002d92:	b2ad      	uxthmi	r5, r5
 8002d94:	e7e6      	b.n	8002d64 <_printf_i+0x184>
 8002d96:	4616      	mov	r6, r2
 8002d98:	e7bb      	b.n	8002d12 <_printf_i+0x132>
 8002d9a:	680b      	ldr	r3, [r1, #0]
 8002d9c:	6826      	ldr	r6, [r4, #0]
 8002d9e:	1d1d      	adds	r5, r3, #4
 8002da0:	6960      	ldr	r0, [r4, #20]
 8002da2:	600d      	str	r5, [r1, #0]
 8002da4:	0635      	lsls	r5, r6, #24
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	d501      	bpl.n	8002dae <_printf_i+0x1ce>
 8002daa:	6018      	str	r0, [r3, #0]
 8002dac:	e002      	b.n	8002db4 <_printf_i+0x1d4>
 8002dae:	0671      	lsls	r1, r6, #25
 8002db0:	d5fb      	bpl.n	8002daa <_printf_i+0x1ca>
 8002db2:	8018      	strh	r0, [r3, #0]
 8002db4:	2300      	movs	r3, #0
 8002db6:	4616      	mov	r6, r2
 8002db8:	6123      	str	r3, [r4, #16]
 8002dba:	e7ba      	b.n	8002d32 <_printf_i+0x152>
 8002dbc:	680b      	ldr	r3, [r1, #0]
 8002dbe:	1d1a      	adds	r2, r3, #4
 8002dc0:	600a      	str	r2, [r1, #0]
 8002dc2:	681e      	ldr	r6, [r3, #0]
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4630      	mov	r0, r6
 8002dc8:	6862      	ldr	r2, [r4, #4]
 8002dca:	f000 f921 	bl	8003010 <memchr>
 8002dce:	b108      	cbz	r0, 8002dd4 <_printf_i+0x1f4>
 8002dd0:	1b80      	subs	r0, r0, r6
 8002dd2:	6060      	str	r0, [r4, #4]
 8002dd4:	6863      	ldr	r3, [r4, #4]
 8002dd6:	6123      	str	r3, [r4, #16]
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dde:	e7a8      	b.n	8002d32 <_printf_i+0x152>
 8002de0:	4632      	mov	r2, r6
 8002de2:	4649      	mov	r1, r9
 8002de4:	4640      	mov	r0, r8
 8002de6:	6923      	ldr	r3, [r4, #16]
 8002de8:	47d0      	blx	sl
 8002dea:	3001      	adds	r0, #1
 8002dec:	d0ab      	beq.n	8002d46 <_printf_i+0x166>
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	079b      	lsls	r3, r3, #30
 8002df2:	d413      	bmi.n	8002e1c <_printf_i+0x23c>
 8002df4:	68e0      	ldr	r0, [r4, #12]
 8002df6:	9b03      	ldr	r3, [sp, #12]
 8002df8:	4298      	cmp	r0, r3
 8002dfa:	bfb8      	it	lt
 8002dfc:	4618      	movlt	r0, r3
 8002dfe:	e7a4      	b.n	8002d4a <_printf_i+0x16a>
 8002e00:	2301      	movs	r3, #1
 8002e02:	4632      	mov	r2, r6
 8002e04:	4649      	mov	r1, r9
 8002e06:	4640      	mov	r0, r8
 8002e08:	47d0      	blx	sl
 8002e0a:	3001      	adds	r0, #1
 8002e0c:	d09b      	beq.n	8002d46 <_printf_i+0x166>
 8002e0e:	3501      	adds	r5, #1
 8002e10:	68e3      	ldr	r3, [r4, #12]
 8002e12:	9903      	ldr	r1, [sp, #12]
 8002e14:	1a5b      	subs	r3, r3, r1
 8002e16:	42ab      	cmp	r3, r5
 8002e18:	dcf2      	bgt.n	8002e00 <_printf_i+0x220>
 8002e1a:	e7eb      	b.n	8002df4 <_printf_i+0x214>
 8002e1c:	2500      	movs	r5, #0
 8002e1e:	f104 0619 	add.w	r6, r4, #25
 8002e22:	e7f5      	b.n	8002e10 <_printf_i+0x230>
 8002e24:	08003155 	.word	0x08003155
 8002e28:	08003166 	.word	0x08003166

08002e2c <_putc_r>:
 8002e2c:	b570      	push	{r4, r5, r6, lr}
 8002e2e:	460d      	mov	r5, r1
 8002e30:	4614      	mov	r4, r2
 8002e32:	4606      	mov	r6, r0
 8002e34:	b118      	cbz	r0, 8002e3e <_putc_r+0x12>
 8002e36:	6983      	ldr	r3, [r0, #24]
 8002e38:	b90b      	cbnz	r3, 8002e3e <_putc_r+0x12>
 8002e3a:	f7ff fb5f 	bl	80024fc <__sinit>
 8002e3e:	4b1c      	ldr	r3, [pc, #112]	; (8002eb0 <_putc_r+0x84>)
 8002e40:	429c      	cmp	r4, r3
 8002e42:	d124      	bne.n	8002e8e <_putc_r+0x62>
 8002e44:	6874      	ldr	r4, [r6, #4]
 8002e46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e48:	07d8      	lsls	r0, r3, #31
 8002e4a:	d405      	bmi.n	8002e58 <_putc_r+0x2c>
 8002e4c:	89a3      	ldrh	r3, [r4, #12]
 8002e4e:	0599      	lsls	r1, r3, #22
 8002e50:	d402      	bmi.n	8002e58 <_putc_r+0x2c>
 8002e52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e54:	f7ff fbf0 	bl	8002638 <__retarget_lock_acquire_recursive>
 8002e58:	68a3      	ldr	r3, [r4, #8]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	60a3      	str	r3, [r4, #8]
 8002e60:	da05      	bge.n	8002e6e <_putc_r+0x42>
 8002e62:	69a2      	ldr	r2, [r4, #24]
 8002e64:	4293      	cmp	r3, r2
 8002e66:	db1c      	blt.n	8002ea2 <_putc_r+0x76>
 8002e68:	b2eb      	uxtb	r3, r5
 8002e6a:	2b0a      	cmp	r3, #10
 8002e6c:	d019      	beq.n	8002ea2 <_putc_r+0x76>
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	6022      	str	r2, [r4, #0]
 8002e74:	701d      	strb	r5, [r3, #0]
 8002e76:	b2ed      	uxtb	r5, r5
 8002e78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e7a:	07da      	lsls	r2, r3, #31
 8002e7c:	d405      	bmi.n	8002e8a <_putc_r+0x5e>
 8002e7e:	89a3      	ldrh	r3, [r4, #12]
 8002e80:	059b      	lsls	r3, r3, #22
 8002e82:	d402      	bmi.n	8002e8a <_putc_r+0x5e>
 8002e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e86:	f7ff fbd8 	bl	800263a <__retarget_lock_release_recursive>
 8002e8a:	4628      	mov	r0, r5
 8002e8c:	bd70      	pop	{r4, r5, r6, pc}
 8002e8e:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <_putc_r+0x88>)
 8002e90:	429c      	cmp	r4, r3
 8002e92:	d101      	bne.n	8002e98 <_putc_r+0x6c>
 8002e94:	68b4      	ldr	r4, [r6, #8]
 8002e96:	e7d6      	b.n	8002e46 <_putc_r+0x1a>
 8002e98:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <_putc_r+0x8c>)
 8002e9a:	429c      	cmp	r4, r3
 8002e9c:	bf08      	it	eq
 8002e9e:	68f4      	ldreq	r4, [r6, #12]
 8002ea0:	e7d1      	b.n	8002e46 <_putc_r+0x1a>
 8002ea2:	4629      	mov	r1, r5
 8002ea4:	4622      	mov	r2, r4
 8002ea6:	4630      	mov	r0, r6
 8002ea8:	f7ff f94e 	bl	8002148 <__swbuf_r>
 8002eac:	4605      	mov	r5, r0
 8002eae:	e7e3      	b.n	8002e78 <_putc_r+0x4c>
 8002eb0:	08003104 	.word	0x08003104
 8002eb4:	08003124 	.word	0x08003124
 8002eb8:	080030e4 	.word	0x080030e4

08002ebc <_sbrk_r>:
 8002ebc:	b538      	push	{r3, r4, r5, lr}
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	4d05      	ldr	r5, [pc, #20]	; (8002ed8 <_sbrk_r+0x1c>)
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	4608      	mov	r0, r1
 8002ec6:	602b      	str	r3, [r5, #0]
 8002ec8:	f7fd fbd6 	bl	8000678 <_sbrk>
 8002ecc:	1c43      	adds	r3, r0, #1
 8002ece:	d102      	bne.n	8002ed6 <_sbrk_r+0x1a>
 8002ed0:	682b      	ldr	r3, [r5, #0]
 8002ed2:	b103      	cbz	r3, 8002ed6 <_sbrk_r+0x1a>
 8002ed4:	6023      	str	r3, [r4, #0]
 8002ed6:	bd38      	pop	{r3, r4, r5, pc}
 8002ed8:	20000140 	.word	0x20000140

08002edc <__sread>:
 8002edc:	b510      	push	{r4, lr}
 8002ede:	460c      	mov	r4, r1
 8002ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ee4:	f000 f8ae 	bl	8003044 <_read_r>
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	bfab      	itete	ge
 8002eec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002eee:	89a3      	ldrhlt	r3, [r4, #12]
 8002ef0:	181b      	addge	r3, r3, r0
 8002ef2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002ef6:	bfac      	ite	ge
 8002ef8:	6563      	strge	r3, [r4, #84]	; 0x54
 8002efa:	81a3      	strhlt	r3, [r4, #12]
 8002efc:	bd10      	pop	{r4, pc}

08002efe <__swrite>:
 8002efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f02:	461f      	mov	r7, r3
 8002f04:	898b      	ldrh	r3, [r1, #12]
 8002f06:	4605      	mov	r5, r0
 8002f08:	05db      	lsls	r3, r3, #23
 8002f0a:	460c      	mov	r4, r1
 8002f0c:	4616      	mov	r6, r2
 8002f0e:	d505      	bpl.n	8002f1c <__swrite+0x1e>
 8002f10:	2302      	movs	r3, #2
 8002f12:	2200      	movs	r2, #0
 8002f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f18:	f000 f868 	bl	8002fec <_lseek_r>
 8002f1c:	89a3      	ldrh	r3, [r4, #12]
 8002f1e:	4632      	mov	r2, r6
 8002f20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f24:	81a3      	strh	r3, [r4, #12]
 8002f26:	4628      	mov	r0, r5
 8002f28:	463b      	mov	r3, r7
 8002f2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f32:	f000 b817 	b.w	8002f64 <_write_r>

08002f36 <__sseek>:
 8002f36:	b510      	push	{r4, lr}
 8002f38:	460c      	mov	r4, r1
 8002f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f3e:	f000 f855 	bl	8002fec <_lseek_r>
 8002f42:	1c43      	adds	r3, r0, #1
 8002f44:	89a3      	ldrh	r3, [r4, #12]
 8002f46:	bf15      	itete	ne
 8002f48:	6560      	strne	r0, [r4, #84]	; 0x54
 8002f4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002f4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f52:	81a3      	strheq	r3, [r4, #12]
 8002f54:	bf18      	it	ne
 8002f56:	81a3      	strhne	r3, [r4, #12]
 8002f58:	bd10      	pop	{r4, pc}

08002f5a <__sclose>:
 8002f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f5e:	f000 b813 	b.w	8002f88 <_close_r>
	...

08002f64 <_write_r>:
 8002f64:	b538      	push	{r3, r4, r5, lr}
 8002f66:	4604      	mov	r4, r0
 8002f68:	4608      	mov	r0, r1
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	4d05      	ldr	r5, [pc, #20]	; (8002f84 <_write_r+0x20>)
 8002f70:	602a      	str	r2, [r5, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	f7fd fb34 	bl	80005e0 <_write>
 8002f78:	1c43      	adds	r3, r0, #1
 8002f7a:	d102      	bne.n	8002f82 <_write_r+0x1e>
 8002f7c:	682b      	ldr	r3, [r5, #0]
 8002f7e:	b103      	cbz	r3, 8002f82 <_write_r+0x1e>
 8002f80:	6023      	str	r3, [r4, #0]
 8002f82:	bd38      	pop	{r3, r4, r5, pc}
 8002f84:	20000140 	.word	0x20000140

08002f88 <_close_r>:
 8002f88:	b538      	push	{r3, r4, r5, lr}
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	4d05      	ldr	r5, [pc, #20]	; (8002fa4 <_close_r+0x1c>)
 8002f8e:	4604      	mov	r4, r0
 8002f90:	4608      	mov	r0, r1
 8002f92:	602b      	str	r3, [r5, #0]
 8002f94:	f7fd fb40 	bl	8000618 <_close>
 8002f98:	1c43      	adds	r3, r0, #1
 8002f9a:	d102      	bne.n	8002fa2 <_close_r+0x1a>
 8002f9c:	682b      	ldr	r3, [r5, #0]
 8002f9e:	b103      	cbz	r3, 8002fa2 <_close_r+0x1a>
 8002fa0:	6023      	str	r3, [r4, #0]
 8002fa2:	bd38      	pop	{r3, r4, r5, pc}
 8002fa4:	20000140 	.word	0x20000140

08002fa8 <_fstat_r>:
 8002fa8:	b538      	push	{r3, r4, r5, lr}
 8002faa:	2300      	movs	r3, #0
 8002fac:	4d06      	ldr	r5, [pc, #24]	; (8002fc8 <_fstat_r+0x20>)
 8002fae:	4604      	mov	r4, r0
 8002fb0:	4608      	mov	r0, r1
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	602b      	str	r3, [r5, #0]
 8002fb6:	f7fd fb3a 	bl	800062e <_fstat>
 8002fba:	1c43      	adds	r3, r0, #1
 8002fbc:	d102      	bne.n	8002fc4 <_fstat_r+0x1c>
 8002fbe:	682b      	ldr	r3, [r5, #0]
 8002fc0:	b103      	cbz	r3, 8002fc4 <_fstat_r+0x1c>
 8002fc2:	6023      	str	r3, [r4, #0]
 8002fc4:	bd38      	pop	{r3, r4, r5, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20000140 	.word	0x20000140

08002fcc <_isatty_r>:
 8002fcc:	b538      	push	{r3, r4, r5, lr}
 8002fce:	2300      	movs	r3, #0
 8002fd0:	4d05      	ldr	r5, [pc, #20]	; (8002fe8 <_isatty_r+0x1c>)
 8002fd2:	4604      	mov	r4, r0
 8002fd4:	4608      	mov	r0, r1
 8002fd6:	602b      	str	r3, [r5, #0]
 8002fd8:	f7fd fb38 	bl	800064c <_isatty>
 8002fdc:	1c43      	adds	r3, r0, #1
 8002fde:	d102      	bne.n	8002fe6 <_isatty_r+0x1a>
 8002fe0:	682b      	ldr	r3, [r5, #0]
 8002fe2:	b103      	cbz	r3, 8002fe6 <_isatty_r+0x1a>
 8002fe4:	6023      	str	r3, [r4, #0]
 8002fe6:	bd38      	pop	{r3, r4, r5, pc}
 8002fe8:	20000140 	.word	0x20000140

08002fec <_lseek_r>:
 8002fec:	b538      	push	{r3, r4, r5, lr}
 8002fee:	4604      	mov	r4, r0
 8002ff0:	4608      	mov	r0, r1
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	4d05      	ldr	r5, [pc, #20]	; (800300c <_lseek_r+0x20>)
 8002ff8:	602a      	str	r2, [r5, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f7fd fb30 	bl	8000660 <_lseek>
 8003000:	1c43      	adds	r3, r0, #1
 8003002:	d102      	bne.n	800300a <_lseek_r+0x1e>
 8003004:	682b      	ldr	r3, [r5, #0]
 8003006:	b103      	cbz	r3, 800300a <_lseek_r+0x1e>
 8003008:	6023      	str	r3, [r4, #0]
 800300a:	bd38      	pop	{r3, r4, r5, pc}
 800300c:	20000140 	.word	0x20000140

08003010 <memchr>:
 8003010:	4603      	mov	r3, r0
 8003012:	b510      	push	{r4, lr}
 8003014:	b2c9      	uxtb	r1, r1
 8003016:	4402      	add	r2, r0
 8003018:	4293      	cmp	r3, r2
 800301a:	4618      	mov	r0, r3
 800301c:	d101      	bne.n	8003022 <memchr+0x12>
 800301e:	2000      	movs	r0, #0
 8003020:	e003      	b.n	800302a <memchr+0x1a>
 8003022:	7804      	ldrb	r4, [r0, #0]
 8003024:	3301      	adds	r3, #1
 8003026:	428c      	cmp	r4, r1
 8003028:	d1f6      	bne.n	8003018 <memchr+0x8>
 800302a:	bd10      	pop	{r4, pc}

0800302c <__malloc_lock>:
 800302c:	4801      	ldr	r0, [pc, #4]	; (8003034 <__malloc_lock+0x8>)
 800302e:	f7ff bb03 	b.w	8002638 <__retarget_lock_acquire_recursive>
 8003032:	bf00      	nop
 8003034:	20000138 	.word	0x20000138

08003038 <__malloc_unlock>:
 8003038:	4801      	ldr	r0, [pc, #4]	; (8003040 <__malloc_unlock+0x8>)
 800303a:	f7ff bafe 	b.w	800263a <__retarget_lock_release_recursive>
 800303e:	bf00      	nop
 8003040:	20000138 	.word	0x20000138

08003044 <_read_r>:
 8003044:	b538      	push	{r3, r4, r5, lr}
 8003046:	4604      	mov	r4, r0
 8003048:	4608      	mov	r0, r1
 800304a:	4611      	mov	r1, r2
 800304c:	2200      	movs	r2, #0
 800304e:	4d05      	ldr	r5, [pc, #20]	; (8003064 <_read_r+0x20>)
 8003050:	602a      	str	r2, [r5, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	f7fd faa7 	bl	80005a6 <_read>
 8003058:	1c43      	adds	r3, r0, #1
 800305a:	d102      	bne.n	8003062 <_read_r+0x1e>
 800305c:	682b      	ldr	r3, [r5, #0]
 800305e:	b103      	cbz	r3, 8003062 <_read_r+0x1e>
 8003060:	6023      	str	r3, [r4, #0]
 8003062:	bd38      	pop	{r3, r4, r5, pc}
 8003064:	20000140 	.word	0x20000140

08003068 <_init>:
 8003068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306a:	bf00      	nop
 800306c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800306e:	bc08      	pop	{r3}
 8003070:	469e      	mov	lr, r3
 8003072:	4770      	bx	lr

08003074 <_fini>:
 8003074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003076:	bf00      	nop
 8003078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800307a:	bc08      	pop	{r3}
 800307c:	469e      	mov	lr, r3
 800307e:	4770      	bx	lr
